
SMART HOME SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000baa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00000baa  00000c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000ae  008000ae  00000c8c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  000013e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f6  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000564  00000000  00000000  000028b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e7  00000000  00000000  00002e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  00003804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047f  00000000  00000000  00003b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fd  00000000  00000000  0000400b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3a       	cpi	r26, 0xAE	; 174
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae ea       	ldi	r26, 0xAE	; 174
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3b       	cpi	r26, 0xBA	; 186
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2e 04 	call	0x85c	; 0x85c <main>
  8a:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPortDirection>:
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	49 f0       	breq	.+18     	; 0xa8 <DIO_setPortDirection+0x16>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	28 f0       	brcs	.+10     	; 0xa4 <DIO_setPortDirection+0x12>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	39 f0       	breq	.+14     	; 0xac <DIO_setPortDirection+0x1a>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	41 f4       	brne	.+16     	; 0xb2 <DIO_setPortDirection+0x20>
  a2:	06 c0       	rjmp	.+12     	; 0xb0 <DIO_setPortDirection+0x1e>
  a4:	6a bb       	out	0x1a, r22	; 26
  a6:	08 95       	ret
  a8:	67 bb       	out	0x17, r22	; 23
  aa:	08 95       	ret
  ac:	64 bb       	out	0x14, r22	; 20
  ae:	08 95       	ret
  b0:	61 bb       	out	0x11, r22	; 17
  b2:	08 95       	ret

000000b4 <DIO_setPortValue>:
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	49 f0       	breq	.+18     	; 0xca <DIO_setPortValue+0x16>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	28 f0       	brcs	.+10     	; 0xc6 <DIO_setPortValue+0x12>
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	39 f0       	breq	.+14     	; 0xce <DIO_setPortValue+0x1a>
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	41 f4       	brne	.+16     	; 0xd4 <DIO_setPortValue+0x20>
  c4:	06 c0       	rjmp	.+12     	; 0xd2 <DIO_setPortValue+0x1e>
  c6:	6b bb       	out	0x1b, r22	; 27
  c8:	08 95       	ret
  ca:	68 bb       	out	0x18, r22	; 24
  cc:	08 95       	ret
  ce:	65 bb       	out	0x15, r22	; 21
  d0:	08 95       	ret
  d2:	62 bb       	out	0x12, r22	; 18
  d4:	08 95       	ret

000000d6 <DIO_readPortValue>:
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	59 f0       	breq	.+22     	; 0xf0 <DIO_readPortValue+0x1a>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	28 f0       	brcs	.+10     	; 0xe8 <DIO_readPortValue+0x12>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	59 f0       	breq	.+22     	; 0xf8 <DIO_readPortValue+0x22>
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	81 f4       	brne	.+32     	; 0x106 <DIO_readPortValue+0x30>
  e6:	0c c0       	rjmp	.+24     	; 0x100 <DIO_readPortValue+0x2a>
  e8:	89 b3       	in	r24, 0x19	; 25
  ea:	fb 01       	movw	r30, r22
  ec:	80 83       	st	Z, r24
  ee:	08 95       	ret
  f0:	86 b3       	in	r24, 0x16	; 22
  f2:	fb 01       	movw	r30, r22
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret
  f8:	83 b3       	in	r24, 0x13	; 19
  fa:	fb 01       	movw	r30, r22
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret
 100:	80 b3       	in	r24, 0x10	; 16
 102:	fb 01       	movw	r30, r22
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <DIO_togglePort>:
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	59 f0       	breq	.+22     	; 0x122 <DIO_togglePort+0x1a>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	28 f0       	brcs	.+10     	; 0x11a <DIO_togglePort+0x12>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	59 f0       	breq	.+22     	; 0x12a <DIO_togglePort+0x22>
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	81 f4       	brne	.+32     	; 0x138 <DIO_togglePort+0x30>
 118:	0c c0       	rjmp	.+24     	; 0x132 <DIO_togglePort+0x2a>
 11a:	8b b3       	in	r24, 0x1b	; 27
 11c:	80 95       	com	r24
 11e:	8b bb       	out	0x1b, r24	; 27
 120:	08 95       	ret
 122:	88 b3       	in	r24, 0x18	; 24
 124:	80 95       	com	r24
 126:	88 bb       	out	0x18, r24	; 24
 128:	08 95       	ret
 12a:	85 b3       	in	r24, 0x15	; 21
 12c:	80 95       	com	r24
 12e:	85 bb       	out	0x15, r24	; 21
 130:	08 95       	ret
 132:	82 b3       	in	r24, 0x12	; 18
 134:	80 95       	com	r24
 136:	82 bb       	out	0x12, r24	; 18
 138:	08 95       	ret

0000013a <DIO_setPinDirection>:
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	49 f1       	breq	.+82     	; 0x190 <DIO_setPinDirection+0x56>
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	38 f0       	brcs	.+14     	; 0x150 <DIO_setPinDirection+0x16>
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	09 f4       	brne	.+2      	; 0x148 <DIO_setPinDirection+0xe>
 146:	44 c0       	rjmp	.+136    	; 0x1d0 <DIO_setPinDirection+0x96>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	09 f0       	breq	.+2      	; 0x14e <DIO_setPinDirection+0x14>
 14c:	7e c0       	rjmp	.+252    	; 0x24a <DIO_setPinDirection+0x110>
 14e:	5f c0       	rjmp	.+190    	; 0x20e <DIO_setPinDirection+0xd4>
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	69 f4       	brne	.+26     	; 0x16e <DIO_setPinDirection+0x34>
 154:	2a b3       	in	r18, 0x1a	; 26
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	ac 01       	movw	r20, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_setPinDirection+0x28>
 15e:	44 0f       	add	r20, r20
 160:	55 1f       	adc	r21, r21
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_setPinDirection+0x24>
 166:	ba 01       	movw	r22, r20
 168:	62 2b       	or	r22, r18
 16a:	6a bb       	out	0x1a, r22	; 26
 16c:	08 95       	ret
 16e:	44 23       	and	r20, r20
 170:	09 f0       	breq	.+2      	; 0x174 <DIO_setPinDirection+0x3a>
 172:	6b c0       	rjmp	.+214    	; 0x24a <DIO_setPinDirection+0x110>
 174:	2a b3       	in	r18, 0x1a	; 26
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ac 01       	movw	r20, r24
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_setPinDirection+0x48>
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_setPinDirection+0x44>
 186:	ba 01       	movw	r22, r20
 188:	60 95       	com	r22
 18a:	62 23       	and	r22, r18
 18c:	6a bb       	out	0x1a, r22	; 26
 18e:	08 95       	ret
 190:	41 30       	cpi	r20, 0x01	; 1
 192:	69 f4       	brne	.+26     	; 0x1ae <DIO_setPinDirection+0x74>
 194:	27 b3       	in	r18, 0x17	; 23
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	ac 01       	movw	r20, r24
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinDirection+0x68>
 19e:	44 0f       	add	r20, r20
 1a0:	55 1f       	adc	r21, r21
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinDirection+0x64>
 1a6:	ba 01       	movw	r22, r20
 1a8:	62 2b       	or	r22, r18
 1aa:	67 bb       	out	0x17, r22	; 23
 1ac:	08 95       	ret
 1ae:	44 23       	and	r20, r20
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_setPinDirection+0x7a>
 1b2:	4b c0       	rjmp	.+150    	; 0x24a <DIO_setPinDirection+0x110>
 1b4:	27 b3       	in	r18, 0x17	; 23
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	ac 01       	movw	r20, r24
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_setPinDirection+0x88>
 1be:	44 0f       	add	r20, r20
 1c0:	55 1f       	adc	r21, r21
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_setPinDirection+0x84>
 1c6:	ba 01       	movw	r22, r20
 1c8:	60 95       	com	r22
 1ca:	62 23       	and	r22, r18
 1cc:	67 bb       	out	0x17, r22	; 23
 1ce:	08 95       	ret
 1d0:	41 30       	cpi	r20, 0x01	; 1
 1d2:	69 f4       	brne	.+26     	; 0x1ee <DIO_setPinDirection+0xb4>
 1d4:	24 b3       	in	r18, 0x14	; 20
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	ac 01       	movw	r20, r24
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_setPinDirection+0xa8>
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_setPinDirection+0xa4>
 1e6:	ba 01       	movw	r22, r20
 1e8:	62 2b       	or	r22, r18
 1ea:	64 bb       	out	0x14, r22	; 20
 1ec:	08 95       	ret
 1ee:	44 23       	and	r20, r20
 1f0:	61 f5       	brne	.+88     	; 0x24a <DIO_setPinDirection+0x110>
 1f2:	24 b3       	in	r18, 0x14	; 20
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_setPinDirection+0xc6>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_setPinDirection+0xc2>
 204:	ba 01       	movw	r22, r20
 206:	60 95       	com	r22
 208:	62 23       	and	r22, r18
 20a:	64 bb       	out	0x14, r22	; 20
 20c:	08 95       	ret
 20e:	41 30       	cpi	r20, 0x01	; 1
 210:	69 f4       	brne	.+26     	; 0x22c <DIO_setPinDirection+0xf2>
 212:	21 b3       	in	r18, 0x11	; 17
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	ac 01       	movw	r20, r24
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_setPinDirection+0xe6>
 21c:	44 0f       	add	r20, r20
 21e:	55 1f       	adc	r21, r21
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_setPinDirection+0xe2>
 224:	ba 01       	movw	r22, r20
 226:	62 2b       	or	r22, r18
 228:	61 bb       	out	0x11, r22	; 17
 22a:	08 95       	ret
 22c:	44 23       	and	r20, r20
 22e:	69 f4       	brne	.+26     	; 0x24a <DIO_setPinDirection+0x110>
 230:	21 b3       	in	r18, 0x11	; 17
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	ac 01       	movw	r20, r24
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_setPinDirection+0x104>
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_setPinDirection+0x100>
 242:	ba 01       	movw	r22, r20
 244:	60 95       	com	r22
 246:	62 23       	and	r22, r18
 248:	61 bb       	out	0x11, r22	; 17
 24a:	08 95       	ret

0000024c <DIO_setPinValue>:
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	49 f1       	breq	.+82     	; 0x2a2 <DIO_setPinValue+0x56>
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	38 f0       	brcs	.+14     	; 0x262 <DIO_setPinValue+0x16>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	09 f4       	brne	.+2      	; 0x25a <DIO_setPinValue+0xe>
 258:	44 c0       	rjmp	.+136    	; 0x2e2 <DIO_setPinValue+0x96>
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	09 f0       	breq	.+2      	; 0x260 <DIO_setPinValue+0x14>
 25e:	7e c0       	rjmp	.+252    	; 0x35c <DIO_setPinValue+0x110>
 260:	5f c0       	rjmp	.+190    	; 0x320 <DIO_setPinValue+0xd4>
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_setPinValue+0x34>
 266:	2b b3       	in	r18, 0x1b	; 27
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_setPinValue+0x28>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_setPinValue+0x24>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	6b bb       	out	0x1b, r22	; 27
 27e:	08 95       	ret
 280:	44 23       	and	r20, r20
 282:	09 f0       	breq	.+2      	; 0x286 <DIO_setPinValue+0x3a>
 284:	6b c0       	rjmp	.+214    	; 0x35c <DIO_setPinValue+0x110>
 286:	2b b3       	in	r18, 0x1b	; 27
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	ac 01       	movw	r20, r24
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_setPinValue+0x48>
 290:	44 0f       	add	r20, r20
 292:	55 1f       	adc	r21, r21
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_setPinValue+0x44>
 298:	ba 01       	movw	r22, r20
 29a:	60 95       	com	r22
 29c:	62 23       	and	r22, r18
 29e:	6b bb       	out	0x1b, r22	; 27
 2a0:	08 95       	ret
 2a2:	41 30       	cpi	r20, 0x01	; 1
 2a4:	69 f4       	brne	.+26     	; 0x2c0 <DIO_setPinValue+0x74>
 2a6:	28 b3       	in	r18, 0x18	; 24
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	ac 01       	movw	r20, r24
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_setPinValue+0x68>
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_setPinValue+0x64>
 2b8:	ba 01       	movw	r22, r20
 2ba:	62 2b       	or	r22, r18
 2bc:	68 bb       	out	0x18, r22	; 24
 2be:	08 95       	ret
 2c0:	44 23       	and	r20, r20
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <DIO_setPinValue+0x7a>
 2c4:	4b c0       	rjmp	.+150    	; 0x35c <DIO_setPinValue+0x110>
 2c6:	28 b3       	in	r18, 0x18	; 24
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	ac 01       	movw	r20, r24
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_setPinValue+0x88>
 2d0:	44 0f       	add	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_setPinValue+0x84>
 2d8:	ba 01       	movw	r22, r20
 2da:	60 95       	com	r22
 2dc:	62 23       	and	r22, r18
 2de:	68 bb       	out	0x18, r22	; 24
 2e0:	08 95       	ret
 2e2:	41 30       	cpi	r20, 0x01	; 1
 2e4:	69 f4       	brne	.+26     	; 0x300 <DIO_setPinValue+0xb4>
 2e6:	25 b3       	in	r18, 0x15	; 21
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	ac 01       	movw	r20, r24
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_setPinValue+0xa8>
 2f0:	44 0f       	add	r20, r20
 2f2:	55 1f       	adc	r21, r21
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_setPinValue+0xa4>
 2f8:	ba 01       	movw	r22, r20
 2fa:	62 2b       	or	r22, r18
 2fc:	65 bb       	out	0x15, r22	; 21
 2fe:	08 95       	ret
 300:	44 23       	and	r20, r20
 302:	61 f5       	brne	.+88     	; 0x35c <DIO_setPinValue+0x110>
 304:	25 b3       	in	r18, 0x15	; 21
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	ac 01       	movw	r20, r24
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_setPinValue+0xc6>
 30e:	44 0f       	add	r20, r20
 310:	55 1f       	adc	r21, r21
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_setPinValue+0xc2>
 316:	ba 01       	movw	r22, r20
 318:	60 95       	com	r22
 31a:	62 23       	and	r22, r18
 31c:	65 bb       	out	0x15, r22	; 21
 31e:	08 95       	ret
 320:	41 30       	cpi	r20, 0x01	; 1
 322:	69 f4       	brne	.+26     	; 0x33e <DIO_setPinValue+0xf2>
 324:	22 b3       	in	r18, 0x12	; 18
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	ac 01       	movw	r20, r24
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_setPinValue+0xe6>
 32e:	44 0f       	add	r20, r20
 330:	55 1f       	adc	r21, r21
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_setPinValue+0xe2>
 336:	ba 01       	movw	r22, r20
 338:	62 2b       	or	r22, r18
 33a:	62 bb       	out	0x12, r22	; 18
 33c:	08 95       	ret
 33e:	44 23       	and	r20, r20
 340:	69 f4       	brne	.+26     	; 0x35c <DIO_setPinValue+0x110>
 342:	22 b3       	in	r18, 0x12	; 18
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	ac 01       	movw	r20, r24
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_setPinValue+0x104>
 34c:	44 0f       	add	r20, r20
 34e:	55 1f       	adc	r21, r21
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_setPinValue+0x100>
 354:	ba 01       	movw	r22, r20
 356:	60 95       	com	r22
 358:	62 23       	and	r22, r18
 35a:	62 bb       	out	0x12, r22	; 18
 35c:	08 95       	ret

0000035e <DIO_readPinValue>:
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	a1 f0       	breq	.+40     	; 0x38a <DIO_readPinValue+0x2c>
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	28 f0       	brcs	.+10     	; 0x370 <DIO_readPinValue+0x12>
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	e9 f0       	breq	.+58     	; 0x3a4 <DIO_readPinValue+0x46>
 36a:	83 30       	cpi	r24, 0x03	; 3
 36c:	a1 f5       	brne	.+104    	; 0x3d6 <DIO_readPinValue+0x78>
 36e:	27 c0       	rjmp	.+78     	; 0x3be <DIO_readPinValue+0x60>
 370:	89 b3       	in	r24, 0x19	; 25
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	9c 01       	movw	r18, r24
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_readPinValue+0x1e>
 378:	35 95       	asr	r19
 37a:	27 95       	ror	r18
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_readPinValue+0x1a>
 380:	b9 01       	movw	r22, r18
 382:	61 70       	andi	r22, 0x01	; 1
 384:	fa 01       	movw	r30, r20
 386:	60 83       	st	Z, r22
 388:	08 95       	ret
 38a:	86 b3       	in	r24, 0x16	; 22
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	9c 01       	movw	r18, r24
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_readPinValue+0x38>
 392:	35 95       	asr	r19
 394:	27 95       	ror	r18
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_readPinValue+0x34>
 39a:	b9 01       	movw	r22, r18
 39c:	61 70       	andi	r22, 0x01	; 1
 39e:	fa 01       	movw	r30, r20
 3a0:	60 83       	st	Z, r22
 3a2:	08 95       	ret
 3a4:	83 b3       	in	r24, 0x13	; 19
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	9c 01       	movw	r18, r24
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_readPinValue+0x52>
 3ac:	35 95       	asr	r19
 3ae:	27 95       	ror	r18
 3b0:	6a 95       	dec	r22
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_readPinValue+0x4e>
 3b4:	b9 01       	movw	r22, r18
 3b6:	61 70       	andi	r22, 0x01	; 1
 3b8:	fa 01       	movw	r30, r20
 3ba:	60 83       	st	Z, r22
 3bc:	08 95       	ret
 3be:	80 b3       	in	r24, 0x10	; 16
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	9c 01       	movw	r18, r24
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_readPinValue+0x6c>
 3c6:	35 95       	asr	r19
 3c8:	27 95       	ror	r18
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_readPinValue+0x68>
 3ce:	b9 01       	movw	r22, r18
 3d0:	61 70       	andi	r22, 0x01	; 1
 3d2:	fa 01       	movw	r30, r20
 3d4:	60 83       	st	Z, r22
 3d6:	08 95       	ret

000003d8 <DIO_togglePin>:
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	a1 f0       	breq	.+40     	; 0x404 <DIO_togglePin+0x2c>
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	28 f0       	brcs	.+10     	; 0x3ea <DIO_togglePin+0x12>
 3e0:	82 30       	cpi	r24, 0x02	; 2
 3e2:	e9 f0       	breq	.+58     	; 0x41e <DIO_togglePin+0x46>
 3e4:	83 30       	cpi	r24, 0x03	; 3
 3e6:	a1 f5       	brne	.+104    	; 0x450 <DIO_togglePin+0x78>
 3e8:	27 c0       	rjmp	.+78     	; 0x438 <DIO_togglePin+0x60>
 3ea:	2b b3       	in	r18, 0x1b	; 27
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	ac 01       	movw	r20, r24
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_togglePin+0x20>
 3f4:	44 0f       	add	r20, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_togglePin+0x1c>
 3fc:	ba 01       	movw	r22, r20
 3fe:	62 27       	eor	r22, r18
 400:	6b bb       	out	0x1b, r22	; 27
 402:	08 95       	ret
 404:	28 b3       	in	r18, 0x18	; 24
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	ac 01       	movw	r20, r24
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_togglePin+0x3a>
 40e:	44 0f       	add	r20, r20
 410:	55 1f       	adc	r21, r21
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_togglePin+0x36>
 416:	ba 01       	movw	r22, r20
 418:	62 27       	eor	r22, r18
 41a:	68 bb       	out	0x18, r22	; 24
 41c:	08 95       	ret
 41e:	25 b3       	in	r18, 0x15	; 21
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	ac 01       	movw	r20, r24
 426:	02 c0       	rjmp	.+4      	; 0x42c <DIO_togglePin+0x54>
 428:	44 0f       	add	r20, r20
 42a:	55 1f       	adc	r21, r21
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <DIO_togglePin+0x50>
 430:	ba 01       	movw	r22, r20
 432:	62 27       	eor	r22, r18
 434:	65 bb       	out	0x15, r22	; 21
 436:	08 95       	ret
 438:	22 b3       	in	r18, 0x12	; 18
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	ac 01       	movw	r20, r24
 440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_togglePin+0x6e>
 442:	44 0f       	add	r20, r20
 444:	55 1f       	adc	r21, r21
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_togglePin+0x6a>
 44a:	ba 01       	movw	r22, r20
 44c:	62 27       	eor	r22, r18
 44e:	62 bb       	out	0x12, r22	; 18
 450:	08 95       	ret

00000452 <LCD_sendCommand>:
	LCD_sendCommand(CURSOR_OFF);
	LCD_sendCommand(CURSOR_LEFT_TO_RIGHT);
}

void LCD_sendCommand(uint8 cmd)
{
 452:	cf 93       	push	r28
 454:	c8 2f       	mov	r28, r24
	DIO_setPinValue(LCD_CMD_PORT, RS_PIN, DIO_PIN_LOW);
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	DIO_setPinValue(LCD_CMD_PORT, RW_PIN, DIO_PIN_LOW);
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	62 e0       	ldi	r22, 0x02	; 2
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_LOW);
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	63 e0       	ldi	r22, 0x03	; 3
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	
	/* send high 4 bits */
	LCD_WRITING_DATA_PORT = ((cmd & 0xF0) | (LCD_WRITING_DATA_PORT & 0x0F));
 474:	8b b3       	in	r24, 0x1b	; 27
 476:	9c 2f       	mov	r25, r28
 478:	90 7f       	andi	r25, 0xF0	; 240
 47a:	8f 70       	andi	r24, 0x0F	; 15
 47c:	89 2b       	or	r24, r25
 47e:	8b bb       	out	0x1b, r24	; 27
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_HIGH);
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	63 e0       	ldi	r22, 0x03	; 3
 484:	41 e0       	ldi	r20, 0x01	; 1
 486:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 48a:	8f e9       	ldi	r24, 0x9F	; 159
 48c:	9f e0       	ldi	r25, 0x0F	; 15
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <LCD_sendCommand+0x3c>
 492:	00 c0       	rjmp	.+0      	; 0x494 <LCD_sendCommand+0x42>
 494:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_LOW);
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	63 e0       	ldi	r22, 0x03	; 3
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	
	/* send low 4 bits */
	LCD_WRITING_DATA_PORT = ((cmd << 4) | (LCD_WRITING_DATA_PORT & 0x0F));
 4a0:	8b b3       	in	r24, 0x1b	; 27
 4a2:	c2 95       	swap	r28
 4a4:	c0 7f       	andi	r28, 0xF0	; 240
 4a6:	8f 70       	andi	r24, 0x0F	; 15
 4a8:	c8 2b       	or	r28, r24
 4aa:	cb bb       	out	0x1b, r28	; 27
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_HIGH);
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	63 e0       	ldi	r22, 0x03	; 3
 4b0:	41 e0       	ldi	r20, 0x01	; 1
 4b2:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
 4b6:	8f e9       	ldi	r24, 0x9F	; 159
 4b8:	9f e0       	ldi	r25, 0x0F	; 15
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <LCD_sendCommand+0x68>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LCD_sendCommand+0x6e>
 4c0:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_LOW);
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	63 e0       	ldi	r22, 0x03	; 3
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
 4cc:	8f e1       	ldi	r24, 0x1F	; 31
 4ce:	9e e4       	ldi	r25, 0x4E	; 78
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <LCD_sendCommand+0x7e>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <LCD_sendCommand+0x84>
 4d6:	00 00       	nop
	
	_delay_ms(5);
}
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <LCD_writeChar>:

void LCD_writeChar(uint8 ch)
{	
 4dc:	cf 93       	push	r28
 4de:	c8 2f       	mov	r28, r24
	DIO_setPinValue(LCD_CMD_PORT, RS_PIN, DIO_PIN_HIGH);
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	DIO_setPinValue(LCD_CMD_PORT, RW_PIN, DIO_PIN_LOW);
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	62 e0       	ldi	r22, 0x02	; 2
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_LOW);
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	63 e0       	ldi	r22, 0x03	; 3
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	
	/* send high 4 bits */
	LCD_WRITING_DATA_PORT = ((ch & 0xF0) | (LCD_WRITING_DATA_PORT & 0x0F));
 4fe:	8b b3       	in	r24, 0x1b	; 27
 500:	9c 2f       	mov	r25, r28
 502:	90 7f       	andi	r25, 0xF0	; 240
 504:	8f 70       	andi	r24, 0x0F	; 15
 506:	89 2b       	or	r24, r25
 508:	8b bb       	out	0x1b, r24	; 27
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_HIGH);
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	63 e0       	ldi	r22, 0x03	; 3
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
 514:	8f e9       	ldi	r24, 0x9F	; 159
 516:	9f e0       	ldi	r25, 0x0F	; 15
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <LCD_writeChar+0x3c>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <LCD_writeChar+0x42>
 51e:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_LOW);
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	63 e0       	ldi	r22, 0x03	; 3
 524:	40 e0       	ldi	r20, 0x00	; 0
 526:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	
	/* send low 4 bits */
	LCD_WRITING_DATA_PORT = ((ch << 4) | (LCD_WRITING_DATA_PORT & 0x0F));
 52a:	8b b3       	in	r24, 0x1b	; 27
 52c:	c2 95       	swap	r28
 52e:	c0 7f       	andi	r28, 0xF0	; 240
 530:	8f 70       	andi	r24, 0x0F	; 15
 532:	c8 2b       	or	r28, r24
 534:	cb bb       	out	0x1b, r28	; 27
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_HIGH);
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	63 e0       	ldi	r22, 0x03	; 3
 53a:	41 e0       	ldi	r20, 0x01	; 1
 53c:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
 540:	8f e9       	ldi	r24, 0x9F	; 159
 542:	9f e0       	ldi	r25, 0x0F	; 15
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <LCD_writeChar+0x68>
 548:	00 c0       	rjmp	.+0      	; 0x54a <LCD_writeChar+0x6e>
 54a:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_LOW);
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	63 e0       	ldi	r22, 0x03	; 3
 550:	40 e0       	ldi	r20, 0x00	; 0
 552:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
 556:	8f e1       	ldi	r24, 0x1F	; 31
 558:	9e e4       	ldi	r25, 0x4E	; 78
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <LCD_writeChar+0x7e>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <LCD_writeChar+0x84>
 560:	00 00       	nop
	
	_delay_ms(5);
}
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <LCD_writeStr>:

void LCD_writeStr(uint8* str)
{
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	8c 01       	movw	r16, r24
	for(uint8 i=0; str[i]!=0; i++)
 56e:	fc 01       	movw	r30, r24
 570:	80 81       	ld	r24, Z
 572:	88 23       	and	r24, r24
 574:	51 f0       	breq	.+20     	; 0x58a <LCD_writeStr+0x24>
 576:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_writeChar(str[i]);
 578:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_writeChar>
	_delay_ms(5);
}

void LCD_writeStr(uint8* str)
{
	for(uint8 i=0; str[i]!=0; i++)
 57c:	cf 5f       	subi	r28, 0xFF	; 255
 57e:	f8 01       	movw	r30, r16
 580:	ec 0f       	add	r30, r28
 582:	f1 1d       	adc	r31, r1
 584:	80 81       	ld	r24, Z
 586:	88 23       	and	r24, r24
 588:	b9 f7       	brne	.-18     	; 0x578 <LCD_writeStr+0x12>
	{
		LCD_writeChar(str[i]);
	}
}
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	08 95       	ret

00000592 <LCD_clear>:

void LCD_clear()
{
	LCD_sendCommand(1);
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
}
 598:	08 95       	ret

0000059a <LCD_init>:

#elif  LCD_MODE == 4

void LCD_init()
{
	DIO_setPinDirection(LCD_CMD_PORT, RS_PIN, DIO_PIN_OUTPUT);
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	61 e0       	ldi	r22, 0x01	; 1
 59e:	41 e0       	ldi	r20, 0x01	; 1
 5a0:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
	DIO_setPinDirection(LCD_CMD_PORT, RW_PIN, DIO_PIN_OUTPUT);
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	62 e0       	ldi	r22, 0x02	; 2
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
	DIO_setPinDirection(LCD_CMD_PORT, E_PIN, DIO_PIN_OUTPUT);
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	63 e0       	ldi	r22, 0x03	; 3
 5b2:	41 e0       	ldi	r20, 0x01	; 1
 5b4:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
	
	DIO_setPinDirection(LCD_DATA_PORT, D4_PIN, DIO_PIN_OUTPUT);
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	64 e0       	ldi	r22, 0x04	; 4
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT, D5_PIN, DIO_PIN_OUTPUT);
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	65 e0       	ldi	r22, 0x05	; 5
 5c6:	41 e0       	ldi	r20, 0x01	; 1
 5c8:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT, D6_PIN, DIO_PIN_OUTPUT);
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	66 e0       	ldi	r22, 0x06	; 6
 5d0:	41 e0       	ldi	r20, 0x01	; 1
 5d2:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT, D7_PIN, DIO_PIN_OUTPUT);
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	67 e0       	ldi	r22, 0x07	; 7
 5da:	41 e0       	ldi	r20, 0x01	; 1
 5dc:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
 5e0:	8f ef       	ldi	r24, 0xFF	; 255
 5e2:	91 ee       	ldi	r25, 0xE1	; 225
 5e4:	a4 e0       	ldi	r26, 0x04	; 4
 5e6:	81 50       	subi	r24, 0x01	; 1
 5e8:	90 40       	sbci	r25, 0x00	; 0
 5ea:	a0 40       	sbci	r26, 0x00	; 0
 5ec:	e1 f7       	brne	.-8      	; 0x5e6 <LCD_init+0x4c>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <LCD_init+0x56>
 5f0:	00 00       	nop
	
	_delay_ms(100);
	LCD_sendCommand(0x33);
 5f2:	83 e3       	ldi	r24, 0x33	; 51
 5f4:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
	LCD_sendCommand(0x32);
 5f8:	82 e3       	ldi	r24, 0x32	; 50
 5fa:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
	LCD_sendCommand(0x28);
 5fe:	88 e2       	ldi	r24, 0x28	; 40
 600:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
	
	LCD_clear();
 604:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_clear>
	LCD_sendCommand(RETURN_HOME);
 608:	82 e0       	ldi	r24, 0x02	; 2
 60a:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_OFF);
 60e:	8c e0       	ldi	r24, 0x0C	; 12
 610:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_LEFT_TO_RIGHT);
 614:	86 e0       	ldi	r24, 0x06	; 6
 616:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
}
 61a:	08 95       	ret

0000061c <LCD_goTo>:
{
	LCD_sendCommand(1);
}

void LCD_goTo(uint8 row, uint8 col)
{
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	00 d0       	rcall	.+0      	; 0x622 <LCD_goTo+0x6>
 622:	cd b7       	in	r28, 0x3d	; 61
 624:	de b7       	in	r29, 0x3e	; 62
uint8 arr[2] = {0x80, 0xC0};
 626:	90 e8       	ldi	r25, 0x80	; 128
 628:	99 83       	std	Y+1, r25	; 0x01
 62a:	90 ec       	ldi	r25, 0xC0	; 192
 62c:	9a 83       	std	Y+2, r25	; 0x02
LCD_sendCommand(arr[row]+col);
 62e:	fe 01       	movw	r30, r28
 630:	e8 0f       	add	r30, r24
 632:	f1 1d       	adc	r31, r1
 634:	81 81       	ldd	r24, Z+1	; 0x01
 636:	86 0f       	add	r24, r22
 638:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
}
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <LCD_writeInt>:

void LCD_writeInt(sint32 num)
{
 646:	4f 92       	push	r4
 648:	5f 92       	push	r5
 64a:	6f 92       	push	r6
 64c:	7f 92       	push	r7
 64e:	8f 92       	push	r8
 650:	9f 92       	push	r9
 652:	af 92       	push	r10
 654:	bf 92       	push	r11
 656:	cf 92       	push	r12
 658:	df 92       	push	r13
 65a:	ef 92       	push	r14
 65c:	ff 92       	push	r15
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
 66a:	2b 97       	sbiw	r28, 0x0b	; 11
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	f8 94       	cli
 670:	de bf       	out	0x3e, r29	; 62
 672:	0f be       	out	0x3f, r0	; 63
 674:	cd bf       	out	0x3d, r28	; 61
 676:	6b 01       	movw	r12, r22
 678:	7c 01       	movw	r14, r24
	if(num == 0)
 67a:	61 15       	cp	r22, r1
 67c:	71 05       	cpc	r23, r1
 67e:	81 05       	cpc	r24, r1
 680:	91 05       	cpc	r25, r1
 682:	21 f4       	brne	.+8      	; 0x68c <LCD_writeInt+0x46>
	{
		LCD_writeChar('0');
 684:	80 e3       	ldi	r24, 0x30	; 48
 686:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_writeChar>
		return;
 68a:	67 c0       	rjmp	.+206    	; 0x75a <LCD_writeInt+0x114>
	}
	
	if(num < 0)
 68c:	99 23       	and	r25, r25
 68e:	8c f0       	brlt	.+34     	; 0x6b2 <LCD_writeInt+0x6c>
 690:	8b 01       	movw	r16, r22
 692:	9c 01       	movw	r18, r24
 694:	02 c0       	rjmp	.+4      	; 0x69a <LCD_writeInt+0x54>
	{
		LCD_writeChar('-');
		num *= -1;
 696:	97 01       	movw	r18, r14
 698:	86 01       	movw	r16, r12
 69a:	bb 24       	eor	r11, r11
	sint32 cpyOfNum = num;
	uint8 len = 0;
	while(cpyOfNum != 0)
	{
		len++;
		cpyOfNum /= 10; 
 69c:	0f 2e       	mov	r0, r31
 69e:	fa e0       	ldi	r31, 0x0A	; 10
 6a0:	4f 2e       	mov	r4, r31
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	5f 2e       	mov	r5, r31
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	6f 2e       	mov	r6, r31
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	7f 2e       	mov	r7, r31
 6ae:	f0 2d       	mov	r31, r0
 6b0:	13 c0       	rjmp	.+38     	; 0x6d8 <LCD_writeInt+0x92>
		return;
	}
	
	if(num < 0)
	{
		LCD_writeChar('-');
 6b2:	8d e2       	ldi	r24, 0x2D	; 45
 6b4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_writeChar>
		num *= -1;
 6b8:	f0 94       	com	r15
 6ba:	e0 94       	com	r14
 6bc:	d0 94       	com	r13
 6be:	c0 94       	com	r12
 6c0:	c1 1c       	adc	r12, r1
 6c2:	d1 1c       	adc	r13, r1
 6c4:	e1 1c       	adc	r14, r1
 6c6:	f1 1c       	adc	r15, r1
	}
	
	uint8 str[11];
	sint32 cpyOfNum = num;
	uint8 len = 0;
	while(cpyOfNum != 0)
 6c8:	c1 14       	cp	r12, r1
 6ca:	d1 04       	cpc	r13, r1
 6cc:	e1 04       	cpc	r14, r1
 6ce:	f1 04       	cpc	r15, r1
 6d0:	11 f7       	brne	.-60     	; 0x696 <LCD_writeInt+0x50>
	{
		len++;
		cpyOfNum /= 10; 
	}
	
	for(int i=len-1; i>=0; i--)
 6d2:	66 24       	eor	r6, r6
 6d4:	77 24       	eor	r7, r7
 6d6:	36 c0       	rjmp	.+108    	; 0x744 <LCD_writeInt+0xfe>
	uint8 str[11];
	sint32 cpyOfNum = num;
	uint8 len = 0;
	while(cpyOfNum != 0)
	{
		len++;
 6d8:	b3 94       	inc	r11
		cpyOfNum /= 10; 
 6da:	c9 01       	movw	r24, r18
 6dc:	b8 01       	movw	r22, r16
 6de:	a3 01       	movw	r20, r6
 6e0:	92 01       	movw	r18, r4
 6e2:	0e 94 82 05 	call	0xb04	; 0xb04 <__divmodsi4>
 6e6:	89 01       	movw	r16, r18
 6e8:	9a 01       	movw	r18, r20
	}
	
	uint8 str[11];
	sint32 cpyOfNum = num;
	uint8 len = 0;
	while(cpyOfNum != 0)
 6ea:	01 15       	cp	r16, r1
 6ec:	11 05       	cpc	r17, r1
 6ee:	21 05       	cpc	r18, r1
 6f0:	31 05       	cpc	r19, r1
 6f2:	91 f7       	brne	.-28     	; 0x6d8 <LCD_writeInt+0x92>
	{
		len++;
		cpyOfNum /= 10; 
	}
	
	for(int i=len-1; i>=0; i--)
 6f4:	6b 2c       	mov	r6, r11
 6f6:	77 24       	eor	r7, r7
 6f8:	c3 01       	movw	r24, r6
 6fa:	01 97       	sbiw	r24, 0x01	; 1
 6fc:	1a f1       	brmi	.+70     	; 0x744 <LCD_writeInt+0xfe>
{
uint8 arr[2] = {0x80, 0xC0};
LCD_sendCommand(arr[row]+col);
}

void LCD_writeInt(sint32 num)
 6fe:	83 01       	movw	r16, r6
 700:	2e 01       	movw	r4, r28
 702:	08 94       	sec
 704:	41 1c       	adc	r4, r1
 706:	51 1c       	adc	r5, r1
 708:	04 0d       	add	r16, r4
 70a:	15 1d       	adc	r17, r5
		cpyOfNum /= 10; 
	}
	
	for(int i=len-1; i>=0; i--)
	{
		str[i] = num%10 + '0';
 70c:	0f 2e       	mov	r0, r31
 70e:	fa e0       	ldi	r31, 0x0A	; 10
 710:	8f 2e       	mov	r8, r31
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	9f 2e       	mov	r9, r31
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	af 2e       	mov	r10, r31
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	bf 2e       	mov	r11, r31
 71e:	f0 2d       	mov	r31, r0
{
uint8 arr[2] = {0x80, 0xC0};
LCD_sendCommand(arr[row]+col);
}

void LCD_writeInt(sint32 num)
 720:	01 50       	subi	r16, 0x01	; 1
 722:	10 40       	sbci	r17, 0x00	; 0
		cpyOfNum /= 10; 
	}
	
	for(int i=len-1; i>=0; i--)
	{
		str[i] = num%10 + '0';
 724:	c7 01       	movw	r24, r14
 726:	b6 01       	movw	r22, r12
 728:	a5 01       	movw	r20, r10
 72a:	94 01       	movw	r18, r8
 72c:	0e 94 82 05 	call	0xb04	; 0xb04 <__divmodsi4>
 730:	60 5d       	subi	r22, 0xD0	; 208
 732:	f8 01       	movw	r30, r16
 734:	60 83       	st	Z, r22
		num /= 10;
 736:	c2 2e       	mov	r12, r18
 738:	d3 2e       	mov	r13, r19
 73a:	e4 2e       	mov	r14, r20
 73c:	f5 2e       	mov	r15, r21
	{
		len++;
		cpyOfNum /= 10; 
	}
	
	for(int i=len-1; i>=0; i--)
 73e:	04 15       	cp	r16, r4
 740:	15 05       	cpc	r17, r5
 742:	71 f7       	brne	.-36     	; 0x720 <LCD_writeInt+0xda>
	{
		str[i] = num%10 + '0';
		num /= 10;
	}
	str[len] = 0;
 744:	e1 e0       	ldi	r30, 0x01	; 1
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	ec 0f       	add	r30, r28
 74a:	fd 1f       	adc	r31, r29
 74c:	e6 0d       	add	r30, r6
 74e:	f7 1d       	adc	r31, r7
 750:	10 82       	st	Z, r1
	
	LCD_writeStr(str);
 752:	ce 01       	movw	r24, r28
 754:	01 96       	adiw	r24, 0x01	; 1
 756:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_writeStr>
}
 75a:	2b 96       	adiw	r28, 0x0b	; 11
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	f8 94       	cli
 760:	de bf       	out	0x3e, r29	; 62
 762:	0f be       	out	0x3f, r0	; 63
 764:	cd bf       	out	0x3d, r28	; 61
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	1f 91       	pop	r17
 76c:	0f 91       	pop	r16
 76e:	ff 90       	pop	r15
 770:	ef 90       	pop	r14
 772:	df 90       	pop	r13
 774:	cf 90       	pop	r12
 776:	bf 90       	pop	r11
 778:	af 90       	pop	r10
 77a:	9f 90       	pop	r9
 77c:	8f 90       	pop	r8
 77e:	7f 90       	pop	r7
 780:	6f 90       	pop	r6
 782:	5f 90       	pop	r5
 784:	4f 90       	pop	r4
 786:	08 95       	ret

00000788 <LED1_Init>:
 788:	82 e0       	ldi	r24, 0x02	; 2
 78a:	61 e0       	ldi	r22, 0x01	; 1
 78c:	41 e0       	ldi	r20, 0x01	; 1
 78e:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
 792:	08 95       	ret

00000794 <LED1_ON>:
 794:	82 e0       	ldi	r24, 0x02	; 2
 796:	61 e0       	ldi	r22, 0x01	; 1
 798:	41 e0       	ldi	r20, 0x01	; 1
 79a:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
 79e:	08 95       	ret

000007a0 <LED1_OFF>:
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	61 e0       	ldi	r22, 0x01	; 1
 7a4:	40 e0       	ldi	r20, 0x00	; 0
 7a6:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
 7aa:	08 95       	ret

000007ac <LED1_TOGGLE>:
 7ac:	82 e0       	ldi	r24, 0x02	; 2
 7ae:	61 e0       	ldi	r22, 0x01	; 1
 7b0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_togglePin>
 7b4:	08 95       	ret

000007b6 <LED2_Init>:
 7b6:	83 e0       	ldi	r24, 0x03	; 3
 7b8:	65 e0       	ldi	r22, 0x05	; 5
 7ba:	41 e0       	ldi	r20, 0x01	; 1
 7bc:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
 7c0:	08 95       	ret

000007c2 <LED2_ON>:
 7c2:	83 e0       	ldi	r24, 0x03	; 3
 7c4:	65 e0       	ldi	r22, 0x05	; 5
 7c6:	41 e0       	ldi	r20, 0x01	; 1
 7c8:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
 7cc:	08 95       	ret

000007ce <LED2_OFF>:
 7ce:	83 e0       	ldi	r24, 0x03	; 3
 7d0:	65 e0       	ldi	r22, 0x05	; 5
 7d2:	40 e0       	ldi	r20, 0x00	; 0
 7d4:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
 7d8:	08 95       	ret

000007da <LED2_TOGGLE>:
 7da:	83 e0       	ldi	r24, 0x03	; 3
 7dc:	65 e0       	ldi	r22, 0x05	; 5
 7de:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIO_togglePin>
 7e2:	08 95       	ret

000007e4 <writeNextLineOfInstructionsAtLCD>:

void writeNextLineOfInstructionsAtLCD(void)
{
	static uint8 currentLine = 0;
	//LCD_clear();
	LCD_goTo(0, 0);
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_goTo>
	LCD_writeStr(instructions[currentLine]);
 7ec:	80 91 ae 00 	lds	r24, 0x00AE
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	9c 01       	movw	r18, r24
 7f4:	22 0f       	add	r18, r18
 7f6:	33 1f       	adc	r19, r19
 7f8:	28 0f       	add	r18, r24
 7fa:	39 1f       	adc	r19, r25
 7fc:	22 0f       	add	r18, r18
 7fe:	33 1f       	adc	r19, r19
 800:	22 0f       	add	r18, r18
 802:	33 1f       	adc	r19, r19
 804:	82 0f       	add	r24, r18
 806:	93 1f       	adc	r25, r19
 808:	80 5a       	subi	r24, 0xA0	; 160
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_writeStr>
	LCD_goTo(1, 0);
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	60 e0       	ldi	r22, 0x00	; 0
 814:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_goTo>
	LCD_writeStr(instructions[(currentLine+1)%6]);
 818:	80 91 ae 00 	lds	r24, 0x00AE
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	01 96       	adiw	r24, 0x01	; 1
 820:	66 e0       	ldi	r22, 0x06	; 6
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	0e 94 6f 05 	call	0xade	; 0xade <__divmodhi4>
 828:	9c 01       	movw	r18, r24
 82a:	22 0f       	add	r18, r18
 82c:	33 1f       	adc	r19, r19
 82e:	28 0f       	add	r18, r24
 830:	39 1f       	adc	r19, r25
 832:	22 0f       	add	r18, r18
 834:	33 1f       	adc	r19, r19
 836:	22 0f       	add	r18, r18
 838:	33 1f       	adc	r19, r19
 83a:	82 0f       	add	r24, r18
 83c:	93 1f       	adc	r25, r19
 83e:	80 5a       	subi	r24, 0xA0	; 160
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_writeStr>
	
	//update current line for the next writing time
	if(currentLine==5)
 846:	80 91 ae 00 	lds	r24, 0x00AE
 84a:	85 30       	cpi	r24, 0x05	; 5
 84c:	19 f4       	brne	.+6      	; 0x854 <writeNextLineOfInstructionsAtLCD+0x70>
	{
		currentLine=0;
 84e:	10 92 ae 00 	sts	0x00AE, r1
 852:	08 95       	ret
	}
	else
	{
		currentLine++;
 854:	8f 5f       	subi	r24, 0xFF	; 255
 856:	80 93 ae 00 	sts	0x00AE, r24
 85a:	08 95       	ret

0000085c <main>:


void writeNextLineOfInstructionsAtLCD();

int main(void)
{
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	0f 92       	push	r0
 862:	cd b7       	in	r28, 0x3d	; 61
 864:	de b7       	in	r29, 0x3e	; 62
	SPI_init();
 866:	0e 94 76 04 	call	0x8ec	; 0x8ec <SPI_init>
	LED1_Init();
 86a:	0e 94 c4 03 	call	0x788	; 0x788 <LED1_Init>
	LED2_Init();
 86e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <LED2_Init>
	LCD_init();
 872:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_init>
	Timer0_init();
 876:	0e 94 9f 04 	call	0x93e	; 0x93e <Timer0_init>
	Timer0_delay_ms(1000, writeNextLineOfInstructionsAtLCD);
 87a:	68 ee       	ldi	r22, 0xE8	; 232
 87c:	73 e0       	ldi	r23, 0x03	; 3
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	42 ef       	ldi	r20, 0xF2	; 242
 884:	53 e0       	ldi	r21, 0x03	; 3
 886:	0e 94 c9 04 	call	0x992	; 0x992 <Timer0_delay_ms>
	Timer0_start();
 88a:	0e 94 b5 04 	call	0x96a	; 0x96a <Timer0_start>
	
	uint8 cmd = 0;		//command received by SPI
 88e:	19 82       	std	Y+1, r1	; 0x01
	uint8 flag = 0;		//indicate that is the command received by SPI is valid or not
	
    while(1)
    {
		flag = SPI_RxOnlyIfAvailableNow(&cmd);
 890:	ce 01       	movw	r24, r28
 892:	01 96       	adiw	r24, 0x01	; 1
 894:	0e 94 96 04 	call	0x92c	; 0x92c <SPI_RxOnlyIfAvailableNow>
		
		if(flag == 1)
 898:	81 30       	cpi	r24, 0x01	; 1
 89a:	d1 f7       	brne	.-12     	; 0x890 <__stack+0x31>
		{
			switch(cmd)
 89c:	89 81       	ldd	r24, Y+1	; 0x01
 89e:	83 33       	cpi	r24, 0x33	; 51
 8a0:	a1 f0       	breq	.+40     	; 0x8ca <__stack+0x6b>
 8a2:	84 33       	cpi	r24, 0x34	; 52
 8a4:	28 f4       	brcc	.+10     	; 0x8b0 <__stack+0x51>
 8a6:	81 33       	cpi	r24, 0x31	; 49
 8a8:	51 f0       	breq	.+20     	; 0x8be <__stack+0x5f>
 8aa:	82 33       	cpi	r24, 0x32	; 50
 8ac:	e9 f4       	brne	.+58     	; 0x8e8 <__stack+0x89>
 8ae:	0a c0       	rjmp	.+20     	; 0x8c4 <__stack+0x65>
 8b0:	85 33       	cpi	r24, 0x35	; 53
 8b2:	89 f0       	breq	.+34     	; 0x8d6 <__stack+0x77>
 8b4:	85 33       	cpi	r24, 0x35	; 53
 8b6:	60 f0       	brcs	.+24     	; 0x8d0 <__stack+0x71>
 8b8:	86 33       	cpi	r24, 0x36	; 54
 8ba:	b1 f4       	brne	.+44     	; 0x8e8 <__stack+0x89>
 8bc:	11 c0       	rjmp	.+34     	; 0x8e0 <__stack+0x81>
			{
				case LED1_ON_CMD:
				LED1_ON();
 8be:	0e 94 ca 03 	call	0x794	; 0x794 <LED1_ON>
				break;
 8c2:	12 c0       	rjmp	.+36     	; 0x8e8 <__stack+0x89>
			
				case LED1_OFF_CMD:
				LED1_OFF();
 8c4:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <LED1_OFF>
				break;
 8c8:	0f c0       	rjmp	.+30     	; 0x8e8 <__stack+0x89>
			
				case LED2_ON_CMD:
				LED2_ON();
 8ca:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LED2_ON>
				break;
 8ce:	0c c0       	rjmp	.+24     	; 0x8e8 <__stack+0x89>
			
				case LED2_OFF_CMD:
				LED2_OFF();
 8d0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LED2_OFF>
				break;
 8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <__stack+0x89>
			
				case ALL_LEDS_ON_CMD:
				LED1_ON();
 8d6:	0e 94 ca 03 	call	0x794	; 0x794 <LED1_ON>
				LED2_ON();
 8da:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LED2_ON>
				break;
 8de:	04 c0       	rjmp	.+8      	; 0x8e8 <__stack+0x89>
			
				case ALL_LEDS_OFF_CMD:
				LED1_OFF();
 8e0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <LED1_OFF>
				LED2_OFF();
 8e4:	0e 94 e7 03 	call	0x7ce	; 0x7ce <LED2_OFF>
				break;
			
				default:
				break;
			}// end of switch(cmd)
			cmd = 0;
 8e8:	19 82       	std	Y+1, r1	; 0x01
 8ea:	d2 cf       	rjmp	.-92     	; 0x890 <__stack+0x31>

000008ec <SPI_init>:
		DIO_setPinDirection(SPI_PORT, SPI_MISO_PIN, DIO_PIN_INPUT);
		DIO_setPinDirection(SPI_PORT, SPI_CLK_PIN, DIO_PIN_OUTPUT);
		SET_BIT(SPCR_value, 4);
	
	#elif SPI_STATE == SPI_ENABLE && SPI_DEVISE_MODE == SPI_SLAV
		DIO_setPinDirection(SPI_PORT, SPI_SS_PIN, DIO_PIN_INPUT);
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	64 e0       	ldi	r22, 0x04	; 4
 8f0:	40 e0       	ldi	r20, 0x00	; 0
 8f2:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
		DIO_setPinDirection(SPI_PORT, SPI_MOSI_PIN, DIO_PIN_INPUT);
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	65 e0       	ldi	r22, 0x05	; 5
 8fa:	40 e0       	ldi	r20, 0x00	; 0
 8fc:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
		DIO_setPinDirection(SPI_PORT, SPI_MISO_PIN, DIO_PIN_OUTPUT);
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	66 e0       	ldi	r22, 0x06	; 6
 904:	41 e0       	ldi	r20, 0x01	; 1
 906:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
		DIO_setPinDirection(SPI_PORT, SPI_CLK_PIN, DIO_PIN_INPUT);
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	67 e0       	ldi	r22, 0x07	; 7
 90e:	40 e0       	ldi	r20, 0x00	; 0
 910:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
	
	#if   SPI_CLK_PHASE_MODE == SPI_CLK_PHASE_HIGH
		SET_BIT(SPCR_value, 2);
	#endif
	
	SPI->SPCR = SPCR_value;
 914:	80 e6       	ldi	r24, 0x60	; 96
 916:	8d b9       	out	0x0d, r24	; 13
}
 918:	08 95       	ret

0000091a <SPI_Transiver>:

uint8 SPI_Transiver(uint8 data)
{
	SPI->SPDR = data;
 91a:	8f b9       	out	0x0f, r24	; 15
	while(GET_BIT(SPI->SPSR, 7) == 0);
 91c:	77 9b       	sbis	0x0e, 7	; 14
 91e:	fe cf       	rjmp	.-4      	; 0x91c <SPI_Transiver+0x2>
	return SPI->SPDR;
 920:	8f b1       	in	r24, 0x0f	; 15
}
 922:	08 95       	ret

00000924 <SPI_RxOnly>:

uint8 SPI_RxOnly()
{
	while(GET_BIT(SPI->SPSR, 7) == 0);
 924:	77 9b       	sbis	0x0e, 7	; 14
 926:	fe cf       	rjmp	.-4      	; 0x924 <SPI_RxOnly>
	return SPI->SPDR;
 928:	8f b1       	in	r24, 0x0f	; 15
}
 92a:	08 95       	ret

0000092c <SPI_RxOnlyIfAvailableNow>:
		1. if there is new data received by SPI now, read it and return 1 to indicate data is valid
		2. if there is no new data received by SPI now, return 0 to indicate data is invalid
	**/
	
	uint8 flag = 0;
	if(GET_BIT(SPI->SPSR, 7) == 1)
 92c:	77 9b       	sbis	0x0e, 7	; 14
 92e:	05 c0       	rjmp	.+10     	; 0x93a <SPI_RxOnlyIfAvailableNow+0xe>
	{
		flag = 1;
		*data = SPI->SPDR;
 930:	2f b1       	in	r18, 0x0f	; 15
 932:	fc 01       	movw	r30, r24
 934:	20 83       	st	Z, r18
	**/
	
	uint8 flag = 0;
	if(GET_BIT(SPI->SPSR, 7) == 1)
	{
		flag = 1;
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	08 95       	ret
		function task is
		1. if there is new data received by SPI now, read it and return 1 to indicate data is valid
		2. if there is no new data received by SPI now, return 0 to indicate data is invalid
	**/
	
	uint8 flag = 0;
 93a:	80 e0       	ldi	r24, 0x00	; 0
	{
		flag = 1;
		*data = SPI->SPDR;
	}
	return flag;
}
 93c:	08 95       	ret

0000093e <Timer0_init>:


void Timer0_init()
{
	#if   TIMER0_MODE == TIMER_NORMAL_MODE
		CLR_BIT(TCCR0, 3);
 93e:	83 b7       	in	r24, 0x33	; 51
 940:	87 7f       	andi	r24, 0xF7	; 247
 942:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0, 6);
 944:	83 b7       	in	r24, 0x33	; 51
 946:	8f 7b       	andi	r24, 0xBF	; 191
 948:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, 3);
		SET_BIT(TCCR0, 6);
	#endif
	
	#if   TIMER0_WAVE_GENERATION_MODE == TIMER_WAVE_GENERATION_DISABLE
		CLR_BIT(TCCR0, 4);
 94a:	83 b7       	in	r24, 0x33	; 51
 94c:	8f 7e       	andi	r24, 0xEF	; 239
 94e:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0, 5);
 950:	83 b7       	in	r24, 0x33	; 51
 952:	8f 7d       	andi	r24, 0xDF	; 223
 954:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, 5);
		SET_BIT(DDRB, 3);
	#endif
	
	#if   TIMER0_OVERFLOW_INTERRUPT_MODE == TIMER_OVERFLOW_INTERRUPT_ENABLE
		SET_BIT(SREG, 7);
 956:	8f b7       	in	r24, 0x3f	; 63
 958:	80 68       	ori	r24, 0x80	; 128
 95a:	8f bf       	out	0x3f, r24	; 63
		SET_BIT(TIMSK, 0);
 95c:	89 b7       	in	r24, 0x39	; 57
 95e:	81 60       	ori	r24, 0x01	; 1
 960:	89 bf       	out	0x39, r24	; 57
	
	#if   TIMER0_COMPARE_MATCH_INTERRUPT_MODE == TIMER_COMPARE_MATCH_INTERRUPT_ENABLE
		SET_BIT(SREG, 7);
		SET_BIT(TIMSK, 1);
	#elif TIMER0_COMPARE_MATCH_INTERRUPT_MODE == TIMER_COMPARE_MATCH_INTERRUPT_DISABLE
		CLR_BIT(TIMSK, 1);
 962:	89 b7       	in	r24, 0x39	; 57
 964:	8d 7f       	andi	r24, 0xFD	; 253
 966:	89 bf       	out	0x39, r24	; 57
	#endif
}
 968:	08 95       	ret

0000096a <Timer0_start>:
	#elif TIMER0_PRESCALER == TIMER_PRESCALER_256
		CLR_BIT(TCCR0, 0);
		CLR_BIT(TCCR0, 1);
		SET_BIT(TCCR0, 2);
	#elif TIMER0_PRESCALER == TIMER_PRESCALER_1024
		SET_BIT(TCCR0, 0);
 96a:	83 b7       	in	r24, 0x33	; 51
 96c:	81 60       	ori	r24, 0x01	; 1
 96e:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0, 1);
 970:	83 b7       	in	r24, 0x33	; 51
 972:	8d 7f       	andi	r24, 0xFD	; 253
 974:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0, 2);
 976:	83 b7       	in	r24, 0x33	; 51
 978:	84 60       	ori	r24, 0x04	; 4
 97a:	83 bf       	out	0x33, r24	; 51
	#endif
}
 97c:	08 95       	ret

0000097e <Timer0_stop>:

void Timer0_stop()
{
	CLR_BIT(TCCR0, 0);
 97e:	83 b7       	in	r24, 0x33	; 51
 980:	8e 7f       	andi	r24, 0xFE	; 254
 982:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, 1);
 984:	83 b7       	in	r24, 0x33	; 51
 986:	8d 7f       	andi	r24, 0xFD	; 253
 988:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, 2);
 98a:	83 b7       	in	r24, 0x33	; 51
 98c:	8b 7f       	andi	r24, 0xFB	; 251
 98e:	83 bf       	out	0x33, r24	; 51
}
 990:	08 95       	ret

00000992 <Timer0_delay_ms>:

void Timer0_delay_ms(uint32 requiredDelay_ms, void (*p2Timer0Function)(void))
{
	Timer0Function = p2Timer0Function;
 992:	50 93 b9 00 	sts	0x00B9, r21
 996:	40 93 b8 00 	sts	0x00B8, r20
	
	#if   TIMER0_MODE == TIMER_NORMAL_MODE
		#if   TIMER0_PRESCALER > F_OSC_MHZ
			uint8 tickTimeMicroSec = TIMER0_PRESCALER / F_OSC_MHZ;
			uint32 requiredTickes = requiredDelay_ms*1000 / tickTimeMicroSec;
 99a:	28 ee       	ldi	r18, 0xE8	; 232
 99c:	33 e0       	ldi	r19, 0x03	; 3
 99e:	40 e0       	ldi	r20, 0x00	; 0
 9a0:	50 e0       	ldi	r21, 0x00	; 0
 9a2:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__mulsi3>
 9a6:	dc 01       	movw	r26, r24
 9a8:	cb 01       	movw	r24, r22
 9aa:	68 94       	set
 9ac:	16 f8       	bld	r1, 6
 9ae:	b6 95       	lsr	r27
 9b0:	a7 95       	ror	r26
 9b2:	97 95       	ror	r25
 9b4:	87 95       	ror	r24
 9b6:	16 94       	lsr	r1
 9b8:	d1 f7       	brne	.-12     	; 0x9ae <Timer0_delay_ms+0x1c>
		#elif TIMER0_PRESCALER < F_OSC_MHZ
			uint16 tickTimeNanoSec = TIMER0_PRESCALER*1000 / F_OSC_MHZ;
			uint32 requiredTickes = requiredDelay_ms*1000000 / tickTimeNanoSec;
		#endif
	
		Timer0_numOfOverFlows = requiredTickes/TIMER0_MAX_TICKS;
 9ba:	49 2f       	mov	r20, r25
 9bc:	5a 2f       	mov	r21, r26
 9be:	6b 2f       	mov	r22, r27
 9c0:	77 27       	eor	r23, r23
 9c2:	40 93 b0 00 	sts	0x00B0, r20
 9c6:	50 93 b1 00 	sts	0x00B1, r21
 9ca:	60 93 b2 00 	sts	0x00B2, r22
 9ce:	70 93 b3 00 	sts	0x00B3, r23
		Timer0_overFlowMode_intialValue = TIMER0_MAX_TICKS - requiredTickes%TIMER0_MAX_TICKS;
 9d2:	28 2f       	mov	r18, r24
 9d4:	21 95       	neg	r18
 9d6:	20 93 af 00 	sts	0x00AF, r18
	
		TCNT0 = Timer0_overFlowMode_intialValue;
 9da:	22 bf       	out	0x32, r18	; 50
		
		if(requiredTickes%TIMER0_MAX_TICKS != 0)
 9dc:	88 23       	and	r24, r24
 9de:	69 f0       	breq	.+26     	; 0x9fa <Timer0_delay_ms+0x68>
		{
			Timer0_numOfOverFlows++;
 9e0:	db 01       	movw	r26, r22
 9e2:	ca 01       	movw	r24, r20
 9e4:	01 96       	adiw	r24, 0x01	; 1
 9e6:	a1 1d       	adc	r26, r1
 9e8:	b1 1d       	adc	r27, r1
 9ea:	80 93 b0 00 	sts	0x00B0, r24
 9ee:	90 93 b1 00 	sts	0x00B1, r25
 9f2:	a0 93 b2 00 	sts	0x00B2, r26
 9f6:	b0 93 b3 00 	sts	0x00B3, r27
 9fa:	08 95       	ret

000009fc <__vector_11>:
}


#if  TIMER0_OVERFLOW_INTERRUPT_MODE == TIMER_OVERFLOW_INTERRUPT_ENABLE
ISR(TIMER0_OVF_vect)
{
 9fc:	1f 92       	push	r1
 9fe:	0f 92       	push	r0
 a00:	0f b6       	in	r0, 0x3f	; 63
 a02:	0f 92       	push	r0
 a04:	11 24       	eor	r1, r1
 a06:	2f 93       	push	r18
 a08:	3f 93       	push	r19
 a0a:	4f 93       	push	r20
 a0c:	5f 93       	push	r21
 a0e:	6f 93       	push	r22
 a10:	7f 93       	push	r23
 a12:	8f 93       	push	r24
 a14:	9f 93       	push	r25
 a16:	af 93       	push	r26
 a18:	bf 93       	push	r27
 a1a:	ef 93       	push	r30
 a1c:	ff 93       	push	r31
	static uint32 counter = 0;
	counter++;
 a1e:	80 91 b4 00 	lds	r24, 0x00B4
 a22:	90 91 b5 00 	lds	r25, 0x00B5
 a26:	a0 91 b6 00 	lds	r26, 0x00B6
 a2a:	b0 91 b7 00 	lds	r27, 0x00B7
 a2e:	01 96       	adiw	r24, 0x01	; 1
 a30:	a1 1d       	adc	r26, r1
 a32:	b1 1d       	adc	r27, r1
 a34:	80 93 b4 00 	sts	0x00B4, r24
 a38:	90 93 b5 00 	sts	0x00B5, r25
 a3c:	a0 93 b6 00 	sts	0x00B6, r26
 a40:	b0 93 b7 00 	sts	0x00B7, r27
	
	if(counter == Timer0_numOfOverFlows)
 a44:	40 91 b0 00 	lds	r20, 0x00B0
 a48:	50 91 b1 00 	lds	r21, 0x00B1
 a4c:	60 91 b2 00 	lds	r22, 0x00B2
 a50:	70 91 b3 00 	lds	r23, 0x00B3
 a54:	84 17       	cp	r24, r20
 a56:	95 07       	cpc	r25, r21
 a58:	a6 07       	cpc	r26, r22
 a5a:	b7 07       	cpc	r27, r23
 a5c:	81 f4       	brne	.+32     	; 0xa7e <__vector_11+0x82>
	{
		Timer0Function();
 a5e:	e0 91 b8 00 	lds	r30, 0x00B8
 a62:	f0 91 b9 00 	lds	r31, 0x00B9
 a66:	09 95       	icall
		counter = 0;
 a68:	10 92 b4 00 	sts	0x00B4, r1
 a6c:	10 92 b5 00 	sts	0x00B5, r1
 a70:	10 92 b6 00 	sts	0x00B6, r1
 a74:	10 92 b7 00 	sts	0x00B7, r1
		TCNT0 = Timer0_overFlowMode_intialValue;
 a78:	80 91 af 00 	lds	r24, 0x00AF
 a7c:	82 bf       	out	0x32, r24	; 50
	}
}
 a7e:	ff 91       	pop	r31
 a80:	ef 91       	pop	r30
 a82:	bf 91       	pop	r27
 a84:	af 91       	pop	r26
 a86:	9f 91       	pop	r25
 a88:	8f 91       	pop	r24
 a8a:	7f 91       	pop	r23
 a8c:	6f 91       	pop	r22
 a8e:	5f 91       	pop	r21
 a90:	4f 91       	pop	r20
 a92:	3f 91       	pop	r19
 a94:	2f 91       	pop	r18
 a96:	0f 90       	pop	r0
 a98:	0f be       	out	0x3f, r0	; 63
 a9a:	0f 90       	pop	r0
 a9c:	1f 90       	pop	r1
 a9e:	18 95       	reti

00000aa0 <__mulsi3>:
 aa0:	62 9f       	mul	r22, r18
 aa2:	d0 01       	movw	r26, r0
 aa4:	73 9f       	mul	r23, r19
 aa6:	f0 01       	movw	r30, r0
 aa8:	82 9f       	mul	r24, r18
 aaa:	e0 0d       	add	r30, r0
 aac:	f1 1d       	adc	r31, r1
 aae:	64 9f       	mul	r22, r20
 ab0:	e0 0d       	add	r30, r0
 ab2:	f1 1d       	adc	r31, r1
 ab4:	92 9f       	mul	r25, r18
 ab6:	f0 0d       	add	r31, r0
 ab8:	83 9f       	mul	r24, r19
 aba:	f0 0d       	add	r31, r0
 abc:	74 9f       	mul	r23, r20
 abe:	f0 0d       	add	r31, r0
 ac0:	65 9f       	mul	r22, r21
 ac2:	f0 0d       	add	r31, r0
 ac4:	99 27       	eor	r25, r25
 ac6:	72 9f       	mul	r23, r18
 ac8:	b0 0d       	add	r27, r0
 aca:	e1 1d       	adc	r30, r1
 acc:	f9 1f       	adc	r31, r25
 ace:	63 9f       	mul	r22, r19
 ad0:	b0 0d       	add	r27, r0
 ad2:	e1 1d       	adc	r30, r1
 ad4:	f9 1f       	adc	r31, r25
 ad6:	bd 01       	movw	r22, r26
 ad8:	cf 01       	movw	r24, r30
 ada:	11 24       	eor	r1, r1
 adc:	08 95       	ret

00000ade <__divmodhi4>:
 ade:	97 fb       	bst	r25, 7
 ae0:	09 2e       	mov	r0, r25
 ae2:	07 26       	eor	r0, r23
 ae4:	0a d0       	rcall	.+20     	; 0xafa <__divmodhi4_neg1>
 ae6:	77 fd       	sbrc	r23, 7
 ae8:	04 d0       	rcall	.+8      	; 0xaf2 <__divmodhi4_neg2>
 aea:	27 d0       	rcall	.+78     	; 0xb3a <__udivmodhi4>
 aec:	06 d0       	rcall	.+12     	; 0xafa <__divmodhi4_neg1>
 aee:	00 20       	and	r0, r0
 af0:	1a f4       	brpl	.+6      	; 0xaf8 <__divmodhi4_exit>

00000af2 <__divmodhi4_neg2>:
 af2:	70 95       	com	r23
 af4:	61 95       	neg	r22
 af6:	7f 4f       	sbci	r23, 0xFF	; 255

00000af8 <__divmodhi4_exit>:
 af8:	08 95       	ret

00000afa <__divmodhi4_neg1>:
 afa:	f6 f7       	brtc	.-4      	; 0xaf8 <__divmodhi4_exit>
 afc:	90 95       	com	r25
 afe:	81 95       	neg	r24
 b00:	9f 4f       	sbci	r25, 0xFF	; 255
 b02:	08 95       	ret

00000b04 <__divmodsi4>:
 b04:	97 fb       	bst	r25, 7
 b06:	09 2e       	mov	r0, r25
 b08:	05 26       	eor	r0, r21
 b0a:	0e d0       	rcall	.+28     	; 0xb28 <__divmodsi4_neg1>
 b0c:	57 fd       	sbrc	r21, 7
 b0e:	04 d0       	rcall	.+8      	; 0xb18 <__divmodsi4_neg2>
 b10:	28 d0       	rcall	.+80     	; 0xb62 <__udivmodsi4>
 b12:	0a d0       	rcall	.+20     	; 0xb28 <__divmodsi4_neg1>
 b14:	00 1c       	adc	r0, r0
 b16:	38 f4       	brcc	.+14     	; 0xb26 <__divmodsi4_exit>

00000b18 <__divmodsi4_neg2>:
 b18:	50 95       	com	r21
 b1a:	40 95       	com	r20
 b1c:	30 95       	com	r19
 b1e:	21 95       	neg	r18
 b20:	3f 4f       	sbci	r19, 0xFF	; 255
 b22:	4f 4f       	sbci	r20, 0xFF	; 255
 b24:	5f 4f       	sbci	r21, 0xFF	; 255

00000b26 <__divmodsi4_exit>:
 b26:	08 95       	ret

00000b28 <__divmodsi4_neg1>:
 b28:	f6 f7       	brtc	.-4      	; 0xb26 <__divmodsi4_exit>
 b2a:	90 95       	com	r25
 b2c:	80 95       	com	r24
 b2e:	70 95       	com	r23
 b30:	61 95       	neg	r22
 b32:	7f 4f       	sbci	r23, 0xFF	; 255
 b34:	8f 4f       	sbci	r24, 0xFF	; 255
 b36:	9f 4f       	sbci	r25, 0xFF	; 255
 b38:	08 95       	ret

00000b3a <__udivmodhi4>:
 b3a:	aa 1b       	sub	r26, r26
 b3c:	bb 1b       	sub	r27, r27
 b3e:	51 e1       	ldi	r21, 0x11	; 17
 b40:	07 c0       	rjmp	.+14     	; 0xb50 <__udivmodhi4_ep>

00000b42 <__udivmodhi4_loop>:
 b42:	aa 1f       	adc	r26, r26
 b44:	bb 1f       	adc	r27, r27
 b46:	a6 17       	cp	r26, r22
 b48:	b7 07       	cpc	r27, r23
 b4a:	10 f0       	brcs	.+4      	; 0xb50 <__udivmodhi4_ep>
 b4c:	a6 1b       	sub	r26, r22
 b4e:	b7 0b       	sbc	r27, r23

00000b50 <__udivmodhi4_ep>:
 b50:	88 1f       	adc	r24, r24
 b52:	99 1f       	adc	r25, r25
 b54:	5a 95       	dec	r21
 b56:	a9 f7       	brne	.-22     	; 0xb42 <__udivmodhi4_loop>
 b58:	80 95       	com	r24
 b5a:	90 95       	com	r25
 b5c:	bc 01       	movw	r22, r24
 b5e:	cd 01       	movw	r24, r26
 b60:	08 95       	ret

00000b62 <__udivmodsi4>:
 b62:	a1 e2       	ldi	r26, 0x21	; 33
 b64:	1a 2e       	mov	r1, r26
 b66:	aa 1b       	sub	r26, r26
 b68:	bb 1b       	sub	r27, r27
 b6a:	fd 01       	movw	r30, r26
 b6c:	0d c0       	rjmp	.+26     	; 0xb88 <__udivmodsi4_ep>

00000b6e <__udivmodsi4_loop>:
 b6e:	aa 1f       	adc	r26, r26
 b70:	bb 1f       	adc	r27, r27
 b72:	ee 1f       	adc	r30, r30
 b74:	ff 1f       	adc	r31, r31
 b76:	a2 17       	cp	r26, r18
 b78:	b3 07       	cpc	r27, r19
 b7a:	e4 07       	cpc	r30, r20
 b7c:	f5 07       	cpc	r31, r21
 b7e:	20 f0       	brcs	.+8      	; 0xb88 <__udivmodsi4_ep>
 b80:	a2 1b       	sub	r26, r18
 b82:	b3 0b       	sbc	r27, r19
 b84:	e4 0b       	sbc	r30, r20
 b86:	f5 0b       	sbc	r31, r21

00000b88 <__udivmodsi4_ep>:
 b88:	66 1f       	adc	r22, r22
 b8a:	77 1f       	adc	r23, r23
 b8c:	88 1f       	adc	r24, r24
 b8e:	99 1f       	adc	r25, r25
 b90:	1a 94       	dec	r1
 b92:	69 f7       	brne	.-38     	; 0xb6e <__udivmodsi4_loop>
 b94:	60 95       	com	r22
 b96:	70 95       	com	r23
 b98:	80 95       	com	r24
 b9a:	90 95       	com	r25
 b9c:	9b 01       	movw	r18, r22
 b9e:	ac 01       	movw	r20, r24
 ba0:	bd 01       	movw	r22, r26
 ba2:	cf 01       	movw	r24, r30
 ba4:	08 95       	ret

00000ba6 <_exit>:
 ba6:	f8 94       	cli

00000ba8 <__stop_program>:
 ba8:	ff cf       	rjmp	.-2      	; 0xba8 <__stop_program>
