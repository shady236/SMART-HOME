
SMART HOME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000540  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000540  000005b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000887  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000338  00000000  00000000  0000166f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a9  00000000  00000000  000019a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00001e50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ec  00000000  00000000  00001fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000047b  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 29 02 	call	0x452	; 0x452 <main>
  8a:	0c 94 9e 02 	jmp	0x53c	; 0x53c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPortDirection>:
#include "DIO.h"

void DIO_setPortDirection(uint8 port, uint8 direction)
{
	switch(port)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	49 f0       	breq	.+18     	; 0xa8 <DIO_setPortDirection+0x16>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	28 f0       	brcs	.+10     	; 0xa4 <DIO_setPortDirection+0x12>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	39 f0       	breq	.+14     	; 0xac <DIO_setPortDirection+0x1a>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	41 f4       	brne	.+16     	; 0xb2 <DIO_setPortDirection+0x20>
  a2:	06 c0       	rjmp	.+12     	; 0xb0 <DIO_setPortDirection+0x1e>
	{
		case DIO_PORTA:
		DDRA = direction;
  a4:	6a bb       	out	0x1a, r22	; 26
		break;
  a6:	08 95       	ret
		
		case DIO_PORTB:
		DDRB = direction;
  a8:	67 bb       	out	0x17, r22	; 23
		break;
  aa:	08 95       	ret
		
		case DIO_PORTC:
		DDRC = direction;
  ac:	64 bb       	out	0x14, r22	; 20
		break;
  ae:	08 95       	ret
		
		case DIO_PORTD:
		DDRD = direction;
  b0:	61 bb       	out	0x11, r22	; 17
  b2:	08 95       	ret

000000b4 <DIO_setPortValue>:
	}
}

void DIO_setPortValue(uint8 port, uint8 value)
{
	switch(port)
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	49 f0       	breq	.+18     	; 0xca <DIO_setPortValue+0x16>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	28 f0       	brcs	.+10     	; 0xc6 <DIO_setPortValue+0x12>
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	39 f0       	breq	.+14     	; 0xce <DIO_setPortValue+0x1a>
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	41 f4       	brne	.+16     	; 0xd4 <DIO_setPortValue+0x20>
  c4:	06 c0       	rjmp	.+12     	; 0xd2 <DIO_setPortValue+0x1e>
	{
		case DIO_PORTA:
		PORTA = value;
  c6:	6b bb       	out	0x1b, r22	; 27
		break;
  c8:	08 95       	ret
		
		case DIO_PORTB:
		PORTB = value;
  ca:	68 bb       	out	0x18, r22	; 24
		break;
  cc:	08 95       	ret
		
		case DIO_PORTC:
		PORTC = value;
  ce:	65 bb       	out	0x15, r22	; 21
		break;
  d0:	08 95       	ret
		
		case DIO_PORTD:
		PORTD = value;
  d2:	62 bb       	out	0x12, r22	; 18
  d4:	08 95       	ret

000000d6 <DIO_readPortValue>:
	}
}

void DIO_readPortValue(uint8 port, uint8* value)
{
	switch(port)
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	59 f0       	breq	.+22     	; 0xf0 <DIO_readPortValue+0x1a>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	28 f0       	brcs	.+10     	; 0xe8 <DIO_readPortValue+0x12>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	59 f0       	breq	.+22     	; 0xf8 <DIO_readPortValue+0x22>
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	81 f4       	brne	.+32     	; 0x106 <DIO_readPortValue+0x30>
  e6:	0c c0       	rjmp	.+24     	; 0x100 <DIO_readPortValue+0x2a>
	{
		case DIO_PORTA:
		*value = PINA;
  e8:	89 b3       	in	r24, 0x19	; 25
  ea:	fb 01       	movw	r30, r22
  ec:	80 83       	st	Z, r24
		break;
  ee:	08 95       	ret
		
		case DIO_PORTB:
		*value = PINB;
  f0:	86 b3       	in	r24, 0x16	; 22
  f2:	fb 01       	movw	r30, r22
  f4:	80 83       	st	Z, r24
		break;
  f6:	08 95       	ret
		
		case DIO_PORTC:
		*value = PINC;
  f8:	83 b3       	in	r24, 0x13	; 19
  fa:	fb 01       	movw	r30, r22
  fc:	80 83       	st	Z, r24
		break;
  fe:	08 95       	ret
		
		case DIO_PORTD:
		*value = PIND;
 100:	80 b3       	in	r24, 0x10	; 16
 102:	fb 01       	movw	r30, r22
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <DIO_togglePort>:
	}
}

void DIO_togglePort(uint8 port)
{
	switch(port)
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	59 f0       	breq	.+22     	; 0x122 <DIO_togglePort+0x1a>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	28 f0       	brcs	.+10     	; 0x11a <DIO_togglePort+0x12>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	59 f0       	breq	.+22     	; 0x12a <DIO_togglePort+0x22>
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	81 f4       	brne	.+32     	; 0x138 <DIO_togglePort+0x30>
 118:	0c c0       	rjmp	.+24     	; 0x132 <DIO_togglePort+0x2a>
	{
		case DIO_PORTA:
		PORTA = ~PORTA;
 11a:	8b b3       	in	r24, 0x1b	; 27
 11c:	80 95       	com	r24
 11e:	8b bb       	out	0x1b, r24	; 27
		break;
 120:	08 95       	ret
		
		case DIO_PORTB:
		PORTB = ~PORTB;
 122:	88 b3       	in	r24, 0x18	; 24
 124:	80 95       	com	r24
 126:	88 bb       	out	0x18, r24	; 24
		break;
 128:	08 95       	ret
		
		case DIO_PORTC:
		PORTC = ~PORTC;
 12a:	85 b3       	in	r24, 0x15	; 21
 12c:	80 95       	com	r24
 12e:	85 bb       	out	0x15, r24	; 21
		break;
 130:	08 95       	ret
		
		case DIO_PORTD:
		PORTD = ~PORTD;
 132:	82 b3       	in	r24, 0x12	; 18
 134:	80 95       	com	r24
 136:	82 bb       	out	0x12, r24	; 18
 138:	08 95       	ret

0000013a <DIO_setPinDirection>:
	}
}

void DIO_setPinDirection(uint8 port, uint8 pin, uint8 direction)
{
	switch(port)
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	49 f1       	breq	.+82     	; 0x190 <DIO_setPinDirection+0x56>
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	38 f0       	brcs	.+14     	; 0x150 <DIO_setPinDirection+0x16>
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	09 f4       	brne	.+2      	; 0x148 <DIO_setPinDirection+0xe>
 146:	44 c0       	rjmp	.+136    	; 0x1d0 <DIO_setPinDirection+0x96>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	09 f0       	breq	.+2      	; 0x14e <DIO_setPinDirection+0x14>
 14c:	7e c0       	rjmp	.+252    	; 0x24a <DIO_setPinDirection+0x110>
 14e:	5f c0       	rjmp	.+190    	; 0x20e <DIO_setPinDirection+0xd4>
	{
		case DIO_PORTA:
		if(direction==DIO_PIN_OUTPUT)
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	69 f4       	brne	.+26     	; 0x16e <DIO_setPinDirection+0x34>
		{
			SET_BIT(DDRA, pin);
 154:	2a b3       	in	r18, 0x1a	; 26
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	ac 01       	movw	r20, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_setPinDirection+0x28>
 15e:	44 0f       	add	r20, r20
 160:	55 1f       	adc	r21, r21
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_setPinDirection+0x24>
 166:	ba 01       	movw	r22, r20
 168:	62 2b       	or	r22, r18
 16a:	6a bb       	out	0x1a, r22	; 26
 16c:	08 95       	ret
		}
		else if(direction==DIO_PIN_INPUT)
 16e:	44 23       	and	r20, r20
 170:	09 f0       	breq	.+2      	; 0x174 <DIO_setPinDirection+0x3a>
 172:	6b c0       	rjmp	.+214    	; 0x24a <DIO_setPinDirection+0x110>
		{
			CLR_BIT(DDRA, pin);
 174:	2a b3       	in	r18, 0x1a	; 26
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ac 01       	movw	r20, r24
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_setPinDirection+0x48>
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_setPinDirection+0x44>
 186:	ba 01       	movw	r22, r20
 188:	60 95       	com	r22
 18a:	62 23       	and	r22, r18
 18c:	6a bb       	out	0x1a, r22	; 26
 18e:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		if(direction==DIO_PIN_OUTPUT)
 190:	41 30       	cpi	r20, 0x01	; 1
 192:	69 f4       	brne	.+26     	; 0x1ae <DIO_setPinDirection+0x74>
		{
			SET_BIT(DDRB, pin);
 194:	27 b3       	in	r18, 0x17	; 23
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	ac 01       	movw	r20, r24
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinDirection+0x68>
 19e:	44 0f       	add	r20, r20
 1a0:	55 1f       	adc	r21, r21
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinDirection+0x64>
 1a6:	ba 01       	movw	r22, r20
 1a8:	62 2b       	or	r22, r18
 1aa:	67 bb       	out	0x17, r22	; 23
 1ac:	08 95       	ret
		}
		else if(direction==DIO_PIN_INPUT)
 1ae:	44 23       	and	r20, r20
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_setPinDirection+0x7a>
 1b2:	4b c0       	rjmp	.+150    	; 0x24a <DIO_setPinDirection+0x110>
		{
			CLR_BIT(DDRB, pin);
 1b4:	27 b3       	in	r18, 0x17	; 23
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	ac 01       	movw	r20, r24
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_setPinDirection+0x88>
 1be:	44 0f       	add	r20, r20
 1c0:	55 1f       	adc	r21, r21
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_setPinDirection+0x84>
 1c6:	ba 01       	movw	r22, r20
 1c8:	60 95       	com	r22
 1ca:	62 23       	and	r22, r18
 1cc:	67 bb       	out	0x17, r22	; 23
 1ce:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		if(direction==DIO_PIN_OUTPUT)
 1d0:	41 30       	cpi	r20, 0x01	; 1
 1d2:	69 f4       	brne	.+26     	; 0x1ee <DIO_setPinDirection+0xb4>
		{
			SET_BIT(DDRC, pin);
 1d4:	24 b3       	in	r18, 0x14	; 20
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	ac 01       	movw	r20, r24
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_setPinDirection+0xa8>
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_setPinDirection+0xa4>
 1e6:	ba 01       	movw	r22, r20
 1e8:	62 2b       	or	r22, r18
 1ea:	64 bb       	out	0x14, r22	; 20
 1ec:	08 95       	ret
		}
		else if(direction==DIO_PIN_INPUT)
 1ee:	44 23       	and	r20, r20
 1f0:	61 f5       	brne	.+88     	; 0x24a <DIO_setPinDirection+0x110>
		{
			CLR_BIT(DDRC, pin);
 1f2:	24 b3       	in	r18, 0x14	; 20
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_setPinDirection+0xc6>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_setPinDirection+0xc2>
 204:	ba 01       	movw	r22, r20
 206:	60 95       	com	r22
 208:	62 23       	and	r22, r18
 20a:	64 bb       	out	0x14, r22	; 20
 20c:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		if(direction==DIO_PIN_OUTPUT)
 20e:	41 30       	cpi	r20, 0x01	; 1
 210:	69 f4       	brne	.+26     	; 0x22c <DIO_setPinDirection+0xf2>
		{
			SET_BIT(DDRD, pin);
 212:	21 b3       	in	r18, 0x11	; 17
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	ac 01       	movw	r20, r24
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_setPinDirection+0xe6>
 21c:	44 0f       	add	r20, r20
 21e:	55 1f       	adc	r21, r21
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_setPinDirection+0xe2>
 224:	ba 01       	movw	r22, r20
 226:	62 2b       	or	r22, r18
 228:	61 bb       	out	0x11, r22	; 17
 22a:	08 95       	ret
		}
		else if(direction==DIO_PIN_INPUT)
 22c:	44 23       	and	r20, r20
 22e:	69 f4       	brne	.+26     	; 0x24a <DIO_setPinDirection+0x110>
		{
			CLR_BIT(DDRD, pin);
 230:	21 b3       	in	r18, 0x11	; 17
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	ac 01       	movw	r20, r24
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_setPinDirection+0x104>
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_setPinDirection+0x100>
 242:	ba 01       	movw	r22, r20
 244:	60 95       	com	r22
 246:	62 23       	and	r22, r18
 248:	61 bb       	out	0x11, r22	; 17
 24a:	08 95       	ret

0000024c <DIO_setPinValue>:
	}
}

void DIO_setPinValue(uint8 port, uint8 pin, uint8 value)
{
	switch(port)
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	49 f1       	breq	.+82     	; 0x2a2 <DIO_setPinValue+0x56>
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	38 f0       	brcs	.+14     	; 0x262 <DIO_setPinValue+0x16>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	09 f4       	brne	.+2      	; 0x25a <DIO_setPinValue+0xe>
 258:	44 c0       	rjmp	.+136    	; 0x2e2 <DIO_setPinValue+0x96>
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	09 f0       	breq	.+2      	; 0x260 <DIO_setPinValue+0x14>
 25e:	7e c0       	rjmp	.+252    	; 0x35c <DIO_setPinValue+0x110>
 260:	5f c0       	rjmp	.+190    	; 0x320 <DIO_setPinValue+0xd4>
	{
		case DIO_PORTA:
		if(value==DIO_PIN_HIGH)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_setPinValue+0x34>
		{
			SET_BIT(PORTA, pin);
 266:	2b b3       	in	r18, 0x1b	; 27
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_setPinValue+0x28>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_setPinValue+0x24>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	6b bb       	out	0x1b, r22	; 27
 27e:	08 95       	ret
		}
		else if(value==DIO_PIN_LOW)
 280:	44 23       	and	r20, r20
 282:	09 f0       	breq	.+2      	; 0x286 <DIO_setPinValue+0x3a>
 284:	6b c0       	rjmp	.+214    	; 0x35c <DIO_setPinValue+0x110>
		{
			CLR_BIT(PORTA, pin);
 286:	2b b3       	in	r18, 0x1b	; 27
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	ac 01       	movw	r20, r24
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_setPinValue+0x48>
 290:	44 0f       	add	r20, r20
 292:	55 1f       	adc	r21, r21
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_setPinValue+0x44>
 298:	ba 01       	movw	r22, r20
 29a:	60 95       	com	r22
 29c:	62 23       	and	r22, r18
 29e:	6b bb       	out	0x1b, r22	; 27
 2a0:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		if(value==DIO_PIN_HIGH)
 2a2:	41 30       	cpi	r20, 0x01	; 1
 2a4:	69 f4       	brne	.+26     	; 0x2c0 <DIO_setPinValue+0x74>
		{
			SET_BIT(PORTB, pin);
 2a6:	28 b3       	in	r18, 0x18	; 24
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	ac 01       	movw	r20, r24
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_setPinValue+0x68>
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_setPinValue+0x64>
 2b8:	ba 01       	movw	r22, r20
 2ba:	62 2b       	or	r22, r18
 2bc:	68 bb       	out	0x18, r22	; 24
 2be:	08 95       	ret
		}
		else if(value==DIO_PIN_LOW)
 2c0:	44 23       	and	r20, r20
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <DIO_setPinValue+0x7a>
 2c4:	4b c0       	rjmp	.+150    	; 0x35c <DIO_setPinValue+0x110>
		{
			CLR_BIT(PORTB, pin);
 2c6:	28 b3       	in	r18, 0x18	; 24
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	ac 01       	movw	r20, r24
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_setPinValue+0x88>
 2d0:	44 0f       	add	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_setPinValue+0x84>
 2d8:	ba 01       	movw	r22, r20
 2da:	60 95       	com	r22
 2dc:	62 23       	and	r22, r18
 2de:	68 bb       	out	0x18, r22	; 24
 2e0:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		if(value==DIO_PIN_HIGH)
 2e2:	41 30       	cpi	r20, 0x01	; 1
 2e4:	69 f4       	brne	.+26     	; 0x300 <DIO_setPinValue+0xb4>
		{
			SET_BIT(PORTC, pin);
 2e6:	25 b3       	in	r18, 0x15	; 21
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	ac 01       	movw	r20, r24
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_setPinValue+0xa8>
 2f0:	44 0f       	add	r20, r20
 2f2:	55 1f       	adc	r21, r21
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_setPinValue+0xa4>
 2f8:	ba 01       	movw	r22, r20
 2fa:	62 2b       	or	r22, r18
 2fc:	65 bb       	out	0x15, r22	; 21
 2fe:	08 95       	ret
		}
		else if(value==DIO_PIN_LOW)
 300:	44 23       	and	r20, r20
 302:	61 f5       	brne	.+88     	; 0x35c <DIO_setPinValue+0x110>
		{
			CLR_BIT(PORTC, pin);
 304:	25 b3       	in	r18, 0x15	; 21
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	ac 01       	movw	r20, r24
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_setPinValue+0xc6>
 30e:	44 0f       	add	r20, r20
 310:	55 1f       	adc	r21, r21
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_setPinValue+0xc2>
 316:	ba 01       	movw	r22, r20
 318:	60 95       	com	r22
 31a:	62 23       	and	r22, r18
 31c:	65 bb       	out	0x15, r22	; 21
 31e:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		if(value==DIO_PIN_HIGH)
 320:	41 30       	cpi	r20, 0x01	; 1
 322:	69 f4       	brne	.+26     	; 0x33e <DIO_setPinValue+0xf2>
		{
			SET_BIT(PORTD, pin);
 324:	22 b3       	in	r18, 0x12	; 18
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	ac 01       	movw	r20, r24
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_setPinValue+0xe6>
 32e:	44 0f       	add	r20, r20
 330:	55 1f       	adc	r21, r21
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_setPinValue+0xe2>
 336:	ba 01       	movw	r22, r20
 338:	62 2b       	or	r22, r18
 33a:	62 bb       	out	0x12, r22	; 18
 33c:	08 95       	ret
		}
		else if(value==DIO_PIN_LOW)
 33e:	44 23       	and	r20, r20
 340:	69 f4       	brne	.+26     	; 0x35c <DIO_setPinValue+0x110>
		{
			CLR_BIT(PORTD, pin);
 342:	22 b3       	in	r18, 0x12	; 18
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	ac 01       	movw	r20, r24
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_setPinValue+0x104>
 34c:	44 0f       	add	r20, r20
 34e:	55 1f       	adc	r21, r21
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_setPinValue+0x100>
 354:	ba 01       	movw	r22, r20
 356:	60 95       	com	r22
 358:	62 23       	and	r22, r18
 35a:	62 bb       	out	0x12, r22	; 18
 35c:	08 95       	ret

0000035e <DIO_readPinValue>:
	}
}

void DIO_readPinValue(uint8 port, uint8 pin, uint8* value)
{
	switch(port)
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	a1 f0       	breq	.+40     	; 0x38a <DIO_readPinValue+0x2c>
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	28 f0       	brcs	.+10     	; 0x370 <DIO_readPinValue+0x12>
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	e9 f0       	breq	.+58     	; 0x3a4 <DIO_readPinValue+0x46>
 36a:	83 30       	cpi	r24, 0x03	; 3
 36c:	a1 f5       	brne	.+104    	; 0x3d6 <DIO_readPinValue+0x78>
 36e:	27 c0       	rjmp	.+78     	; 0x3be <DIO_readPinValue+0x60>
	{
		case DIO_PORTA:
		*value = GET_BIT(PINA, pin);
 370:	89 b3       	in	r24, 0x19	; 25
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	9c 01       	movw	r18, r24
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_readPinValue+0x1e>
 378:	35 95       	asr	r19
 37a:	27 95       	ror	r18
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_readPinValue+0x1a>
 380:	b9 01       	movw	r22, r18
 382:	61 70       	andi	r22, 0x01	; 1
 384:	fa 01       	movw	r30, r20
 386:	60 83       	st	Z, r22
		break;
 388:	08 95       	ret
		
		case DIO_PORTB:
		*value = GET_BIT(PINB, pin);
 38a:	86 b3       	in	r24, 0x16	; 22
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	9c 01       	movw	r18, r24
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_readPinValue+0x38>
 392:	35 95       	asr	r19
 394:	27 95       	ror	r18
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_readPinValue+0x34>
 39a:	b9 01       	movw	r22, r18
 39c:	61 70       	andi	r22, 0x01	; 1
 39e:	fa 01       	movw	r30, r20
 3a0:	60 83       	st	Z, r22
		break;
 3a2:	08 95       	ret
		
		case DIO_PORTC:
		*value = GET_BIT(PINC, pin);
 3a4:	83 b3       	in	r24, 0x13	; 19
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	9c 01       	movw	r18, r24
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_readPinValue+0x52>
 3ac:	35 95       	asr	r19
 3ae:	27 95       	ror	r18
 3b0:	6a 95       	dec	r22
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_readPinValue+0x4e>
 3b4:	b9 01       	movw	r22, r18
 3b6:	61 70       	andi	r22, 0x01	; 1
 3b8:	fa 01       	movw	r30, r20
 3ba:	60 83       	st	Z, r22
		break;
 3bc:	08 95       	ret
		
		case DIO_PORTD:
		*value = GET_BIT(PIND, pin);
 3be:	80 b3       	in	r24, 0x10	; 16
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	9c 01       	movw	r18, r24
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_readPinValue+0x6c>
 3c6:	35 95       	asr	r19
 3c8:	27 95       	ror	r18
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_readPinValue+0x68>
 3ce:	b9 01       	movw	r22, r18
 3d0:	61 70       	andi	r22, 0x01	; 1
 3d2:	fa 01       	movw	r30, r20
 3d4:	60 83       	st	Z, r22
 3d6:	08 95       	ret

000003d8 <DIO_togglePin>:



void DIO_togglePin(uint8 port, uint8 pin)
{
	switch(port)
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	a1 f0       	breq	.+40     	; 0x404 <DIO_togglePin+0x2c>
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	28 f0       	brcs	.+10     	; 0x3ea <DIO_togglePin+0x12>
 3e0:	82 30       	cpi	r24, 0x02	; 2
 3e2:	e9 f0       	breq	.+58     	; 0x41e <DIO_togglePin+0x46>
 3e4:	83 30       	cpi	r24, 0x03	; 3
 3e6:	a1 f5       	brne	.+104    	; 0x450 <DIO_togglePin+0x78>
 3e8:	27 c0       	rjmp	.+78     	; 0x438 <DIO_togglePin+0x60>
	{
		case DIO_PORTA:
		TOG_BIT(PORTA, pin);
 3ea:	2b b3       	in	r18, 0x1b	; 27
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	ac 01       	movw	r20, r24
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_togglePin+0x20>
 3f4:	44 0f       	add	r20, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_togglePin+0x1c>
 3fc:	ba 01       	movw	r22, r20
 3fe:	62 27       	eor	r22, r18
 400:	6b bb       	out	0x1b, r22	; 27
		break;
 402:	08 95       	ret
		
		case DIO_PORTB:
		TOG_BIT(PORTB, pin);
 404:	28 b3       	in	r18, 0x18	; 24
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	ac 01       	movw	r20, r24
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_togglePin+0x3a>
 40e:	44 0f       	add	r20, r20
 410:	55 1f       	adc	r21, r21
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_togglePin+0x36>
 416:	ba 01       	movw	r22, r20
 418:	62 27       	eor	r22, r18
 41a:	68 bb       	out	0x18, r22	; 24
		break;
 41c:	08 95       	ret
		
		case DIO_PORTC:
		TOG_BIT(PORTC, pin);
 41e:	25 b3       	in	r18, 0x15	; 21
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	ac 01       	movw	r20, r24
 426:	02 c0       	rjmp	.+4      	; 0x42c <DIO_togglePin+0x54>
 428:	44 0f       	add	r20, r20
 42a:	55 1f       	adc	r21, r21
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <DIO_togglePin+0x50>
 430:	ba 01       	movw	r22, r20
 432:	62 27       	eor	r22, r18
 434:	65 bb       	out	0x15, r22	; 21
		break;
 436:	08 95       	ret
		
		case DIO_PORTD:
		TOG_BIT(PORTD, pin);
 438:	22 b3       	in	r18, 0x12	; 18
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	ac 01       	movw	r20, r24
 440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_togglePin+0x6e>
 442:	44 0f       	add	r20, r20
 444:	55 1f       	adc	r21, r21
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_togglePin+0x6a>
 44a:	ba 01       	movw	r22, r20
 44c:	62 27       	eor	r22, r18
 44e:	62 bb       	out	0x12, r22	; 18
 450:	08 95       	ret

00000452 <main>:
#define F_CPU	8000000UL
#include <util/delay.h>

int main(void)
{
	UART_init();
 452:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <UART_init>
	SPI_init();
 456:	0e 94 3d 02 	call	0x47a	; 0x47a <SPI_init>
	SPI_masterStartTransmission();
 45a:	0e 94 5f 02 	call	0x4be	; 0x4be <SPI_masterStartTransmission>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	99 e6       	ldi	r25, 0x69	; 105
 462:	a8 e1       	ldi	r26, 0x18	; 24
 464:	81 50       	subi	r24, 0x01	; 1
 466:	90 40       	sbci	r25, 0x00	; 0
 468:	a0 40       	sbci	r26, 0x00	; 0
 46a:	e1 f7       	brne	.-8      	; 0x464 <main+0x12>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <main+0x1c>
 46e:	00 00       	nop
	_delay_ms(1000);
	uint8 data;
	
    while(1)
    {
		data = UART_Rx();
 470:	0e 94 7f 02 	call	0x4fe	; 0x4fe <UART_Rx>
		SPI_Transiver(data);
 474:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_Transiver>
 478:	fb cf       	rjmp	.-10     	; 0x470 <main+0x1e>

0000047a <SPI_init>:
		SET_BIT(SPCR_value, 7);
	#endif
	
	
	#if  SPI_STATE == SPI_ENABLE && SPI_DEVISE_MODE == SPI_MSTR
		DIO_setPinDirection(SPI_PORT, SPI_SS_PIN, DIO_PIN_OUTPUT);
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	64 e0       	ldi	r22, 0x04	; 4
 47e:	41 e0       	ldi	r20, 0x01	; 1
 480:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
		DIO_setPinDirection(SPI_PORT, SPI_MOSI_PIN, DIO_PIN_OUTPUT);
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	65 e0       	ldi	r22, 0x05	; 5
 488:	41 e0       	ldi	r20, 0x01	; 1
 48a:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
		DIO_setPinDirection(SPI_PORT, SPI_MISO_PIN, DIO_PIN_INPUT);
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	66 e0       	ldi	r22, 0x06	; 6
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
		DIO_setPinDirection(SPI_PORT, SPI_CLK_PIN, DIO_PIN_OUTPUT);
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	67 e0       	ldi	r22, 0x07	; 7
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
		SET_BIT(SPCR_value, 1);
		SPI->SPSR = 0xC1;
	#elif SPI_DEVISE_MODE == SPI_MSTR && SPI_CLK_PRESCALER == SPI_CLK_PRESCALER_128
		SET_BIT(SPCR_value, 0);
		SET_BIT(SPCR_value, 1);
		SPI->SPSR = 0xC0;
 4a2:	80 ec       	ldi	r24, 0xC0	; 192
 4a4:	8e b9       	out	0x0e, r24	; 14
	
	#if   SPI_CLK_PHASE_MODE == SPI_CLK_PHASE_HIGH
		SET_BIT(SPCR_value, 2);
	#endif
	
	SPI->SPCR = SPCR_value;
 4a6:	83 e7       	ldi	r24, 0x73	; 115
 4a8:	8d b9       	out	0x0d, r24	; 13
}
 4aa:	08 95       	ret

000004ac <SPI_Transiver>:

uint8 SPI_Transiver(uint8 data)
{
	SPI->SPDR = data;
 4ac:	8f b9       	out	0x0f, r24	; 15
	while(GET_BIT(SPI->SPSR, 7) == 0);
 4ae:	77 9b       	sbis	0x0e, 7	; 14
 4b0:	fe cf       	rjmp	.-4      	; 0x4ae <SPI_Transiver+0x2>
	return SPI->SPDR;
 4b2:	8f b1       	in	r24, 0x0f	; 15
}
 4b4:	08 95       	ret

000004b6 <SPI_RxOnly>:

uint8 SPI_RxOnly()
{
	while(GET_BIT(SPI->SPSR, 7) == 0);
 4b6:	77 9b       	sbis	0x0e, 7	; 14
 4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <SPI_RxOnly>
	return SPI->SPDR;
 4ba:	8f b1       	in	r24, 0x0f	; 15
}
 4bc:	08 95       	ret

000004be <SPI_masterStartTransmission>:

#if  SPI_DEVISE_MODE == SPI_MSTR
void SPI_masterStartTransmission()
{
	DIO_setPinValue(SPI_PORT, SPI_SS_PIN, DIO_PIN_LOW);
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	64 e0       	ldi	r22, 0x04	; 4
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
}
 4c8:	08 95       	ret

000004ca <SPI_masterEndTransmission>:

void SPI_masterEndTransmission()
{
	DIO_setPinValue(SPI_PORT, SPI_SS_PIN, DIO_PIN_HIGH);
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	64 e0       	ldi	r22, 0x04	; 4
 4ce:	41 e0       	ldi	r20, 0x01	; 1
 4d0:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
}
 4d4:	08 95       	ret

000004d6 <UART_init>:
#include "UART.h"

void UART_init()
{
	uint32 buadRate = F_OSC / (16*BUAD_RATE) - 1;
	UBRRL = buadRate;
 4d6:	83 e3       	ldi	r24, 0x33	; 51
 4d8:	89 b9       	out	0x09, r24	; 9
	UBRRH = buadRate>>8;
 4da:	10 bc       	out	0x20, r1	; 32
	
	
	#if  RX_STATE == RX_ENABLE
		DIO_setPinDirection(UART_PORT, UART_RX_PIN, DIO_PIN_INPUT);
 4dc:	83 e0       	ldi	r24, 0x03	; 3
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	40 e0       	ldi	r20, 0x00	; 0
 4e2:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
		SET_BIT(UCSRB, 4);
 4e6:	54 9a       	sbi	0x0a, 4	; 10
	#elif RX_STATE == RX_DISABLE
		CLR_BIT(UCSRB, 4);
	#endif
	
	#if  TX_STATE == TX_ENABLE
		DIO_setPinDirection(UART_PORT, UART_TX_PIN, DIO_PIN_OUTPUT);
 4e8:	83 e0       	ldi	r24, 0x03	; 3
 4ea:	61 e0       	ldi	r22, 0x01	; 1
 4ec:	41 e0       	ldi	r20, 0x01	; 1
 4ee:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
		SET_BIT(UCSRB, 3);
 4f2:	53 9a       	sbi	0x0a, 3	; 10
	
	
	#if  RX_INTERRUPT_STATE == RX_INTERRUPT_ENABLE
		SET_BIT(UCSRB, 7);
	#elif RX_INTERRUPT_STATE == RX_INTERRUPT_DISABLE
		CLR_BIT(UCSRB, 7);
 4f4:	57 98       	cbi	0x0a, 7	; 10
	#endif
	
	#if  TX_INTERRUPT_STATE == TX_INTERRUPT_ENABLE
		SET_BIT(UCSRB, 6);
	#elif TX_INTERRUPT_STATE == TX_INTERRUPT_DISABLE
		CLR_BIT(UCSRB, 6);
 4f6:	56 98       	cbi	0x0a, 6	; 10
		SET_BIT(UCSRB, 2);
		SET_BIT(UCSRC_value, 2);
		SET_BIT(UCSRC_value, 1);
	#endif
	
	UCSRC = UCSRC_value;
 4f8:	86 e8       	ldi	r24, 0x86	; 134
 4fa:	80 bd       	out	0x20, r24	; 32
	
}
 4fc:	08 95       	ret

000004fe <UART_Rx>:

uint8 UART_Rx()
{
	while(GET_BIT(UCSRA, 7) == 0);
 4fe:	5f 9b       	sbis	0x0b, 7	; 11
 500:	fe cf       	rjmp	.-4      	; 0x4fe <UART_Rx>
	return UDR;
 502:	8c b1       	in	r24, 0x0c	; 12
}
 504:	08 95       	ret

00000506 <UART_Tx>:

void UART_Tx(uint8 data)
{
	UDR = data;
 506:	8c b9       	out	0x0c, r24	; 12
	while(GET_BIT(UCSRA, 5) == 0);
 508:	8b b1       	in	r24, 0x0b	; 11
 50a:	85 ff       	sbrs	r24, 5
 50c:	fd cf       	rjmp	.-6      	; 0x508 <UART_Tx+0x2>
}
 50e:	08 95       	ret

00000510 <UART_TxString>:

void UART_TxString(uint8* str)
{
 510:	0f 93       	push	r16
 512:	1f 93       	push	r17
 514:	cf 93       	push	r28
 516:	8c 01       	movw	r16, r24
	uint8 i=0;
	while(str[i] != 0) 
 518:	fc 01       	movw	r30, r24
 51a:	80 81       	ld	r24, Z
 51c:	88 23       	and	r24, r24
 51e:	51 f0       	breq	.+20     	; 0x534 <UART_TxString+0x24>
	while(GET_BIT(UCSRA, 5) == 0);
}

void UART_TxString(uint8* str)
{
	uint8 i=0;
 520:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != 0) 
	{
		UART_Tx(str[i]);
 522:	0e 94 83 02 	call	0x506	; 0x506 <UART_Tx>
		i++;
 526:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_TxString(uint8* str)
{
	uint8 i=0;
	while(str[i] != 0) 
 528:	f8 01       	movw	r30, r16
 52a:	ec 0f       	add	r30, r28
 52c:	f1 1d       	adc	r31, r1
 52e:	80 81       	ld	r24, Z
 530:	88 23       	and	r24, r24
 532:	b9 f7       	brne	.-18     	; 0x522 <UART_TxString+0x12>
	{
		UART_Tx(str[i]);
		i++;
	}
}
 534:	cf 91       	pop	r28
 536:	1f 91       	pop	r17
 538:	0f 91       	pop	r16
 53a:	08 95       	ret

0000053c <_exit>:
 53c:	f8 94       	cli

0000053e <__stop_program>:
 53e:	ff cf       	rjmp	.-2      	; 0x53e <__stop_program>
