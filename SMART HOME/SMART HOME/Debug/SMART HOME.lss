
SMART HOME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000008fc  00000970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000970  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000010c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e6f  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004cb  00000000  00000000  00002077  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000817  00000000  00000000  00002542  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000288  00000000  00000000  00002d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035b  00000000  00000000  00002fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007d2  00000000  00000000  0000333f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c4 03 	call	0x788	; 0x788 <main>
  8a:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPortDirection>:
#include "DIO.h"

void DIO_setPortDirection(uint8 port, uint8 direction)
{
	switch(port)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	49 f0       	breq	.+18     	; 0xa8 <DIO_setPortDirection+0x16>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	28 f0       	brcs	.+10     	; 0xa4 <DIO_setPortDirection+0x12>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	39 f0       	breq	.+14     	; 0xac <DIO_setPortDirection+0x1a>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	41 f4       	brne	.+16     	; 0xb2 <DIO_setPortDirection+0x20>
  a2:	06 c0       	rjmp	.+12     	; 0xb0 <DIO_setPortDirection+0x1e>
	{
		case DIO_PORTA:
		DDRA = direction;
  a4:	6a bb       	out	0x1a, r22	; 26
		break;
  a6:	08 95       	ret
		
		case DIO_PORTB:
		DDRB = direction;
  a8:	67 bb       	out	0x17, r22	; 23
		break;
  aa:	08 95       	ret
		
		case DIO_PORTC:
		DDRC = direction;
  ac:	64 bb       	out	0x14, r22	; 20
		break;
  ae:	08 95       	ret
		
		case DIO_PORTD:
		DDRD = direction;
  b0:	61 bb       	out	0x11, r22	; 17
  b2:	08 95       	ret

000000b4 <DIO_setPortValue>:
	}
}

void DIO_setPortValue(uint8 port, uint8 value)
{
	switch(port)
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	49 f0       	breq	.+18     	; 0xca <DIO_setPortValue+0x16>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	28 f0       	brcs	.+10     	; 0xc6 <DIO_setPortValue+0x12>
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	39 f0       	breq	.+14     	; 0xce <DIO_setPortValue+0x1a>
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	41 f4       	brne	.+16     	; 0xd4 <DIO_setPortValue+0x20>
  c4:	06 c0       	rjmp	.+12     	; 0xd2 <DIO_setPortValue+0x1e>
	{
		case DIO_PORTA:
		PORTA = value;
  c6:	6b bb       	out	0x1b, r22	; 27
		break;
  c8:	08 95       	ret
		
		case DIO_PORTB:
		PORTB = value;
  ca:	68 bb       	out	0x18, r22	; 24
		break;
  cc:	08 95       	ret
		
		case DIO_PORTC:
		PORTC = value;
  ce:	65 bb       	out	0x15, r22	; 21
		break;
  d0:	08 95       	ret
		
		case DIO_PORTD:
		PORTD = value;
  d2:	62 bb       	out	0x12, r22	; 18
  d4:	08 95       	ret

000000d6 <DIO_readPortValue>:
	}
}

void DIO_readPortValue(uint8 port, uint8* value)
{
	switch(port)
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	59 f0       	breq	.+22     	; 0xf0 <DIO_readPortValue+0x1a>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	28 f0       	brcs	.+10     	; 0xe8 <DIO_readPortValue+0x12>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	59 f0       	breq	.+22     	; 0xf8 <DIO_readPortValue+0x22>
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	81 f4       	brne	.+32     	; 0x106 <DIO_readPortValue+0x30>
  e6:	0c c0       	rjmp	.+24     	; 0x100 <DIO_readPortValue+0x2a>
	{
		case DIO_PORTA:
		*value = PINA;
  e8:	89 b3       	in	r24, 0x19	; 25
  ea:	fb 01       	movw	r30, r22
  ec:	80 83       	st	Z, r24
		break;
  ee:	08 95       	ret
		
		case DIO_PORTB:
		*value = PINB;
  f0:	86 b3       	in	r24, 0x16	; 22
  f2:	fb 01       	movw	r30, r22
  f4:	80 83       	st	Z, r24
		break;
  f6:	08 95       	ret
		
		case DIO_PORTC:
		*value = PINC;
  f8:	83 b3       	in	r24, 0x13	; 19
  fa:	fb 01       	movw	r30, r22
  fc:	80 83       	st	Z, r24
		break;
  fe:	08 95       	ret
		
		case DIO_PORTD:
		*value = PIND;
 100:	80 b3       	in	r24, 0x10	; 16
 102:	fb 01       	movw	r30, r22
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <DIO_togglePort>:
	}
}

void DIO_togglePort(uint8 port)
{
	switch(port)
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	59 f0       	breq	.+22     	; 0x122 <DIO_togglePort+0x1a>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	28 f0       	brcs	.+10     	; 0x11a <DIO_togglePort+0x12>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	59 f0       	breq	.+22     	; 0x12a <DIO_togglePort+0x22>
 114:	83 30       	cpi	r24, 0x03	; 3
 116:	81 f4       	brne	.+32     	; 0x138 <DIO_togglePort+0x30>
 118:	0c c0       	rjmp	.+24     	; 0x132 <DIO_togglePort+0x2a>
	{
		case DIO_PORTA:
		PORTA = ~PORTA;
 11a:	8b b3       	in	r24, 0x1b	; 27
 11c:	80 95       	com	r24
 11e:	8b bb       	out	0x1b, r24	; 27
		break;
 120:	08 95       	ret
		
		case DIO_PORTB:
		PORTB = ~PORTB;
 122:	88 b3       	in	r24, 0x18	; 24
 124:	80 95       	com	r24
 126:	88 bb       	out	0x18, r24	; 24
		break;
 128:	08 95       	ret
		
		case DIO_PORTC:
		PORTC = ~PORTC;
 12a:	85 b3       	in	r24, 0x15	; 21
 12c:	80 95       	com	r24
 12e:	85 bb       	out	0x15, r24	; 21
		break;
 130:	08 95       	ret
		
		case DIO_PORTD:
		PORTD = ~PORTD;
 132:	82 b3       	in	r24, 0x12	; 18
 134:	80 95       	com	r24
 136:	82 bb       	out	0x12, r24	; 18
 138:	08 95       	ret

0000013a <DIO_setPinDirection>:
	}
}

void DIO_setPinDirection(uint8 port, uint8 pin, uint8 direction)
{
	switch(port)
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	49 f1       	breq	.+82     	; 0x190 <DIO_setPinDirection+0x56>
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	38 f0       	brcs	.+14     	; 0x150 <DIO_setPinDirection+0x16>
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	09 f4       	brne	.+2      	; 0x148 <DIO_setPinDirection+0xe>
 146:	44 c0       	rjmp	.+136    	; 0x1d0 <DIO_setPinDirection+0x96>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	09 f0       	breq	.+2      	; 0x14e <DIO_setPinDirection+0x14>
 14c:	7e c0       	rjmp	.+252    	; 0x24a <DIO_setPinDirection+0x110>
 14e:	5f c0       	rjmp	.+190    	; 0x20e <DIO_setPinDirection+0xd4>
	{
		case DIO_PORTA:
		if(direction==DIO_PIN_OUTPUT)
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	69 f4       	brne	.+26     	; 0x16e <DIO_setPinDirection+0x34>
		{
			SET_BIT(DDRA, pin);
 154:	2a b3       	in	r18, 0x1a	; 26
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	ac 01       	movw	r20, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_setPinDirection+0x28>
 15e:	44 0f       	add	r20, r20
 160:	55 1f       	adc	r21, r21
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_setPinDirection+0x24>
 166:	ba 01       	movw	r22, r20
 168:	62 2b       	or	r22, r18
 16a:	6a bb       	out	0x1a, r22	; 26
 16c:	08 95       	ret
		}
		else if(direction==DIO_PIN_INPUT)
 16e:	44 23       	and	r20, r20
 170:	09 f0       	breq	.+2      	; 0x174 <DIO_setPinDirection+0x3a>
 172:	6b c0       	rjmp	.+214    	; 0x24a <DIO_setPinDirection+0x110>
		{
			CLR_BIT(DDRA, pin);
 174:	2a b3       	in	r18, 0x1a	; 26
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ac 01       	movw	r20, r24
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_setPinDirection+0x48>
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_setPinDirection+0x44>
 186:	ba 01       	movw	r22, r20
 188:	60 95       	com	r22
 18a:	62 23       	and	r22, r18
 18c:	6a bb       	out	0x1a, r22	; 26
 18e:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		if(direction==DIO_PIN_OUTPUT)
 190:	41 30       	cpi	r20, 0x01	; 1
 192:	69 f4       	brne	.+26     	; 0x1ae <DIO_setPinDirection+0x74>
		{
			SET_BIT(DDRB, pin);
 194:	27 b3       	in	r18, 0x17	; 23
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	ac 01       	movw	r20, r24
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinDirection+0x68>
 19e:	44 0f       	add	r20, r20
 1a0:	55 1f       	adc	r21, r21
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinDirection+0x64>
 1a6:	ba 01       	movw	r22, r20
 1a8:	62 2b       	or	r22, r18
 1aa:	67 bb       	out	0x17, r22	; 23
 1ac:	08 95       	ret
		}
		else if(direction==DIO_PIN_INPUT)
 1ae:	44 23       	and	r20, r20
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_setPinDirection+0x7a>
 1b2:	4b c0       	rjmp	.+150    	; 0x24a <DIO_setPinDirection+0x110>
		{
			CLR_BIT(DDRB, pin);
 1b4:	27 b3       	in	r18, 0x17	; 23
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	ac 01       	movw	r20, r24
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_setPinDirection+0x88>
 1be:	44 0f       	add	r20, r20
 1c0:	55 1f       	adc	r21, r21
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_setPinDirection+0x84>
 1c6:	ba 01       	movw	r22, r20
 1c8:	60 95       	com	r22
 1ca:	62 23       	and	r22, r18
 1cc:	67 bb       	out	0x17, r22	; 23
 1ce:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		if(direction==DIO_PIN_OUTPUT)
 1d0:	41 30       	cpi	r20, 0x01	; 1
 1d2:	69 f4       	brne	.+26     	; 0x1ee <DIO_setPinDirection+0xb4>
		{
			SET_BIT(DDRC, pin);
 1d4:	24 b3       	in	r18, 0x14	; 20
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	ac 01       	movw	r20, r24
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_setPinDirection+0xa8>
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_setPinDirection+0xa4>
 1e6:	ba 01       	movw	r22, r20
 1e8:	62 2b       	or	r22, r18
 1ea:	64 bb       	out	0x14, r22	; 20
 1ec:	08 95       	ret
		}
		else if(direction==DIO_PIN_INPUT)
 1ee:	44 23       	and	r20, r20
 1f0:	61 f5       	brne	.+88     	; 0x24a <DIO_setPinDirection+0x110>
		{
			CLR_BIT(DDRC, pin);
 1f2:	24 b3       	in	r18, 0x14	; 20
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_setPinDirection+0xc6>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_setPinDirection+0xc2>
 204:	ba 01       	movw	r22, r20
 206:	60 95       	com	r22
 208:	62 23       	and	r22, r18
 20a:	64 bb       	out	0x14, r22	; 20
 20c:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		if(direction==DIO_PIN_OUTPUT)
 20e:	41 30       	cpi	r20, 0x01	; 1
 210:	69 f4       	brne	.+26     	; 0x22c <DIO_setPinDirection+0xf2>
		{
			SET_BIT(DDRD, pin);
 212:	21 b3       	in	r18, 0x11	; 17
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	ac 01       	movw	r20, r24
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_setPinDirection+0xe6>
 21c:	44 0f       	add	r20, r20
 21e:	55 1f       	adc	r21, r21
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_setPinDirection+0xe2>
 224:	ba 01       	movw	r22, r20
 226:	62 2b       	or	r22, r18
 228:	61 bb       	out	0x11, r22	; 17
 22a:	08 95       	ret
		}
		else if(direction==DIO_PIN_INPUT)
 22c:	44 23       	and	r20, r20
 22e:	69 f4       	brne	.+26     	; 0x24a <DIO_setPinDirection+0x110>
		{
			CLR_BIT(DDRD, pin);
 230:	21 b3       	in	r18, 0x11	; 17
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	ac 01       	movw	r20, r24
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_setPinDirection+0x104>
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_setPinDirection+0x100>
 242:	ba 01       	movw	r22, r20
 244:	60 95       	com	r22
 246:	62 23       	and	r22, r18
 248:	61 bb       	out	0x11, r22	; 17
 24a:	08 95       	ret

0000024c <DIO_setPinValue>:
	}
}

void DIO_setPinValue(uint8 port, uint8 pin, uint8 value)
{
	switch(port)
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	49 f1       	breq	.+82     	; 0x2a2 <DIO_setPinValue+0x56>
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	38 f0       	brcs	.+14     	; 0x262 <DIO_setPinValue+0x16>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	09 f4       	brne	.+2      	; 0x25a <DIO_setPinValue+0xe>
 258:	44 c0       	rjmp	.+136    	; 0x2e2 <DIO_setPinValue+0x96>
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	09 f0       	breq	.+2      	; 0x260 <DIO_setPinValue+0x14>
 25e:	7e c0       	rjmp	.+252    	; 0x35c <DIO_setPinValue+0x110>
 260:	5f c0       	rjmp	.+190    	; 0x320 <DIO_setPinValue+0xd4>
	{
		case DIO_PORTA:
		if(value==DIO_PIN_HIGH)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_setPinValue+0x34>
		{
			SET_BIT(PORTA, pin);
 266:	2b b3       	in	r18, 0x1b	; 27
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_setPinValue+0x28>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_setPinValue+0x24>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	6b bb       	out	0x1b, r22	; 27
 27e:	08 95       	ret
		}
		else if(value==DIO_PIN_LOW)
 280:	44 23       	and	r20, r20
 282:	09 f0       	breq	.+2      	; 0x286 <DIO_setPinValue+0x3a>
 284:	6b c0       	rjmp	.+214    	; 0x35c <DIO_setPinValue+0x110>
		{
			CLR_BIT(PORTA, pin);
 286:	2b b3       	in	r18, 0x1b	; 27
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	ac 01       	movw	r20, r24
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_setPinValue+0x48>
 290:	44 0f       	add	r20, r20
 292:	55 1f       	adc	r21, r21
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_setPinValue+0x44>
 298:	ba 01       	movw	r22, r20
 29a:	60 95       	com	r22
 29c:	62 23       	and	r22, r18
 29e:	6b bb       	out	0x1b, r22	; 27
 2a0:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		if(value==DIO_PIN_HIGH)
 2a2:	41 30       	cpi	r20, 0x01	; 1
 2a4:	69 f4       	brne	.+26     	; 0x2c0 <DIO_setPinValue+0x74>
		{
			SET_BIT(PORTB, pin);
 2a6:	28 b3       	in	r18, 0x18	; 24
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	ac 01       	movw	r20, r24
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_setPinValue+0x68>
 2b0:	44 0f       	add	r20, r20
 2b2:	55 1f       	adc	r21, r21
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_setPinValue+0x64>
 2b8:	ba 01       	movw	r22, r20
 2ba:	62 2b       	or	r22, r18
 2bc:	68 bb       	out	0x18, r22	; 24
 2be:	08 95       	ret
		}
		else if(value==DIO_PIN_LOW)
 2c0:	44 23       	and	r20, r20
 2c2:	09 f0       	breq	.+2      	; 0x2c6 <DIO_setPinValue+0x7a>
 2c4:	4b c0       	rjmp	.+150    	; 0x35c <DIO_setPinValue+0x110>
		{
			CLR_BIT(PORTB, pin);
 2c6:	28 b3       	in	r18, 0x18	; 24
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	ac 01       	movw	r20, r24
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_setPinValue+0x88>
 2d0:	44 0f       	add	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_setPinValue+0x84>
 2d8:	ba 01       	movw	r22, r20
 2da:	60 95       	com	r22
 2dc:	62 23       	and	r22, r18
 2de:	68 bb       	out	0x18, r22	; 24
 2e0:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		if(value==DIO_PIN_HIGH)
 2e2:	41 30       	cpi	r20, 0x01	; 1
 2e4:	69 f4       	brne	.+26     	; 0x300 <DIO_setPinValue+0xb4>
		{
			SET_BIT(PORTC, pin);
 2e6:	25 b3       	in	r18, 0x15	; 21
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	ac 01       	movw	r20, r24
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_setPinValue+0xa8>
 2f0:	44 0f       	add	r20, r20
 2f2:	55 1f       	adc	r21, r21
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_setPinValue+0xa4>
 2f8:	ba 01       	movw	r22, r20
 2fa:	62 2b       	or	r22, r18
 2fc:	65 bb       	out	0x15, r22	; 21
 2fe:	08 95       	ret
		}
		else if(value==DIO_PIN_LOW)
 300:	44 23       	and	r20, r20
 302:	61 f5       	brne	.+88     	; 0x35c <DIO_setPinValue+0x110>
		{
			CLR_BIT(PORTC, pin);
 304:	25 b3       	in	r18, 0x15	; 21
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	ac 01       	movw	r20, r24
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_setPinValue+0xc6>
 30e:	44 0f       	add	r20, r20
 310:	55 1f       	adc	r21, r21
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_setPinValue+0xc2>
 316:	ba 01       	movw	r22, r20
 318:	60 95       	com	r22
 31a:	62 23       	and	r22, r18
 31c:	65 bb       	out	0x15, r22	; 21
 31e:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		if(value==DIO_PIN_HIGH)
 320:	41 30       	cpi	r20, 0x01	; 1
 322:	69 f4       	brne	.+26     	; 0x33e <DIO_setPinValue+0xf2>
		{
			SET_BIT(PORTD, pin);
 324:	22 b3       	in	r18, 0x12	; 18
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	ac 01       	movw	r20, r24
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_setPinValue+0xe6>
 32e:	44 0f       	add	r20, r20
 330:	55 1f       	adc	r21, r21
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_setPinValue+0xe2>
 336:	ba 01       	movw	r22, r20
 338:	62 2b       	or	r22, r18
 33a:	62 bb       	out	0x12, r22	; 18
 33c:	08 95       	ret
		}
		else if(value==DIO_PIN_LOW)
 33e:	44 23       	and	r20, r20
 340:	69 f4       	brne	.+26     	; 0x35c <DIO_setPinValue+0x110>
		{
			CLR_BIT(PORTD, pin);
 342:	22 b3       	in	r18, 0x12	; 18
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	ac 01       	movw	r20, r24
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_setPinValue+0x104>
 34c:	44 0f       	add	r20, r20
 34e:	55 1f       	adc	r21, r21
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_setPinValue+0x100>
 354:	ba 01       	movw	r22, r20
 356:	60 95       	com	r22
 358:	62 23       	and	r22, r18
 35a:	62 bb       	out	0x12, r22	; 18
 35c:	08 95       	ret

0000035e <DIO_readPinValue>:
	}
}

void DIO_readPinValue(uint8 port, uint8 pin, uint8* value)
{
	switch(port)
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	a1 f0       	breq	.+40     	; 0x38a <DIO_readPinValue+0x2c>
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	28 f0       	brcs	.+10     	; 0x370 <DIO_readPinValue+0x12>
 366:	82 30       	cpi	r24, 0x02	; 2
 368:	e9 f0       	breq	.+58     	; 0x3a4 <DIO_readPinValue+0x46>
 36a:	83 30       	cpi	r24, 0x03	; 3
 36c:	a1 f5       	brne	.+104    	; 0x3d6 <DIO_readPinValue+0x78>
 36e:	27 c0       	rjmp	.+78     	; 0x3be <DIO_readPinValue+0x60>
	{
		case DIO_PORTA:
		*value = GET_BIT(PINA, pin);
 370:	89 b3       	in	r24, 0x19	; 25
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	9c 01       	movw	r18, r24
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_readPinValue+0x1e>
 378:	35 95       	asr	r19
 37a:	27 95       	ror	r18
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_readPinValue+0x1a>
 380:	b9 01       	movw	r22, r18
 382:	61 70       	andi	r22, 0x01	; 1
 384:	fa 01       	movw	r30, r20
 386:	60 83       	st	Z, r22
		break;
 388:	08 95       	ret
		
		case DIO_PORTB:
		*value = GET_BIT(PINB, pin);
 38a:	86 b3       	in	r24, 0x16	; 22
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	9c 01       	movw	r18, r24
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_readPinValue+0x38>
 392:	35 95       	asr	r19
 394:	27 95       	ror	r18
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_readPinValue+0x34>
 39a:	b9 01       	movw	r22, r18
 39c:	61 70       	andi	r22, 0x01	; 1
 39e:	fa 01       	movw	r30, r20
 3a0:	60 83       	st	Z, r22
		break;
 3a2:	08 95       	ret
		
		case DIO_PORTC:
		*value = GET_BIT(PINC, pin);
 3a4:	83 b3       	in	r24, 0x13	; 19
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	9c 01       	movw	r18, r24
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_readPinValue+0x52>
 3ac:	35 95       	asr	r19
 3ae:	27 95       	ror	r18
 3b0:	6a 95       	dec	r22
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_readPinValue+0x4e>
 3b4:	b9 01       	movw	r22, r18
 3b6:	61 70       	andi	r22, 0x01	; 1
 3b8:	fa 01       	movw	r30, r20
 3ba:	60 83       	st	Z, r22
		break;
 3bc:	08 95       	ret
		
		case DIO_PORTD:
		*value = GET_BIT(PIND, pin);
 3be:	80 b3       	in	r24, 0x10	; 16
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	9c 01       	movw	r18, r24
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_readPinValue+0x6c>
 3c6:	35 95       	asr	r19
 3c8:	27 95       	ror	r18
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_readPinValue+0x68>
 3ce:	b9 01       	movw	r22, r18
 3d0:	61 70       	andi	r22, 0x01	; 1
 3d2:	fa 01       	movw	r30, r20
 3d4:	60 83       	st	Z, r22
 3d6:	08 95       	ret

000003d8 <DIO_togglePin>:



void DIO_togglePin(uint8 port, uint8 pin)
{
	switch(port)
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	a1 f0       	breq	.+40     	; 0x404 <DIO_togglePin+0x2c>
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	28 f0       	brcs	.+10     	; 0x3ea <DIO_togglePin+0x12>
 3e0:	82 30       	cpi	r24, 0x02	; 2
 3e2:	e9 f0       	breq	.+58     	; 0x41e <DIO_togglePin+0x46>
 3e4:	83 30       	cpi	r24, 0x03	; 3
 3e6:	a1 f5       	brne	.+104    	; 0x450 <DIO_togglePin+0x78>
 3e8:	27 c0       	rjmp	.+78     	; 0x438 <DIO_togglePin+0x60>
	{
		case DIO_PORTA:
		TOG_BIT(PORTA, pin);
 3ea:	2b b3       	in	r18, 0x1b	; 27
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	ac 01       	movw	r20, r24
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_togglePin+0x20>
 3f4:	44 0f       	add	r20, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_togglePin+0x1c>
 3fc:	ba 01       	movw	r22, r20
 3fe:	62 27       	eor	r22, r18
 400:	6b bb       	out	0x1b, r22	; 27
		break;
 402:	08 95       	ret
		
		case DIO_PORTB:
		TOG_BIT(PORTB, pin);
 404:	28 b3       	in	r18, 0x18	; 24
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	ac 01       	movw	r20, r24
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_togglePin+0x3a>
 40e:	44 0f       	add	r20, r20
 410:	55 1f       	adc	r21, r21
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_togglePin+0x36>
 416:	ba 01       	movw	r22, r20
 418:	62 27       	eor	r22, r18
 41a:	68 bb       	out	0x18, r22	; 24
		break;
 41c:	08 95       	ret
		
		case DIO_PORTC:
		TOG_BIT(PORTC, pin);
 41e:	25 b3       	in	r18, 0x15	; 21
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	ac 01       	movw	r20, r24
 426:	02 c0       	rjmp	.+4      	; 0x42c <DIO_togglePin+0x54>
 428:	44 0f       	add	r20, r20
 42a:	55 1f       	adc	r21, r21
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <DIO_togglePin+0x50>
 430:	ba 01       	movw	r22, r20
 432:	62 27       	eor	r22, r18
 434:	65 bb       	out	0x15, r22	; 21
		break;
 436:	08 95       	ret
		
		case DIO_PORTD:
		TOG_BIT(PORTD, pin);
 438:	22 b3       	in	r18, 0x12	; 18
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	ac 01       	movw	r20, r24
 440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_togglePin+0x6e>
 442:	44 0f       	add	r20, r20
 444:	55 1f       	adc	r21, r21
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_togglePin+0x6a>
 44a:	ba 01       	movw	r22, r20
 44c:	62 27       	eor	r22, r18
 44e:	62 bb       	out	0x12, r22	; 18
 450:	08 95       	ret

00000452 <LCD_sendCommand>:
	LCD_sendCommand(CURSOR_OFF);
	LCD_sendCommand(CURSOR_LEFT_TO_RIGHT);
}

void LCD_sendCommand(uint8 cmd)
{
 452:	cf 93       	push	r28
 454:	c8 2f       	mov	r28, r24
	DIO_setPinValue(LCD_CMD_PORT, RS_PIN, DIO_PIN_LOW);
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	DIO_setPinValue(LCD_CMD_PORT, RW_PIN, DIO_PIN_LOW);
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	62 e0       	ldi	r22, 0x02	; 2
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_LOW);
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	63 e0       	ldi	r22, 0x03	; 3
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	
	/* send high 4 bits */
	LCD_WRITING_DATA_PORT = ((cmd & 0xF0) | (LCD_WRITING_DATA_PORT & 0x0F));
 474:	8b b3       	in	r24, 0x1b	; 27
 476:	9c 2f       	mov	r25, r28
 478:	90 7f       	andi	r25, 0xF0	; 240
 47a:	8f 70       	andi	r24, 0x0F	; 15
 47c:	89 2b       	or	r24, r25
 47e:	8b bb       	out	0x1b, r24	; 27
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_HIGH);
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	63 e0       	ldi	r22, 0x03	; 3
 484:	41 e0       	ldi	r20, 0x01	; 1
 486:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 48a:	8f e9       	ldi	r24, 0x9F	; 159
 48c:	9f e0       	ldi	r25, 0x0F	; 15
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <LCD_sendCommand+0x3c>
 492:	00 c0       	rjmp	.+0      	; 0x494 <LCD_sendCommand+0x42>
 494:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_LOW);
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	63 e0       	ldi	r22, 0x03	; 3
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	
	/* send low 4 bits */
	LCD_WRITING_DATA_PORT = ((cmd << 4) | (LCD_WRITING_DATA_PORT & 0x0F));
 4a0:	8b b3       	in	r24, 0x1b	; 27
 4a2:	c2 95       	swap	r28
 4a4:	c0 7f       	andi	r28, 0xF0	; 240
 4a6:	8f 70       	andi	r24, 0x0F	; 15
 4a8:	c8 2b       	or	r28, r24
 4aa:	cb bb       	out	0x1b, r28	; 27
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_HIGH);
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	63 e0       	ldi	r22, 0x03	; 3
 4b0:	41 e0       	ldi	r20, 0x01	; 1
 4b2:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
 4b6:	8f e9       	ldi	r24, 0x9F	; 159
 4b8:	9f e0       	ldi	r25, 0x0F	; 15
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <LCD_sendCommand+0x68>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LCD_sendCommand+0x6e>
 4c0:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_LOW);
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	63 e0       	ldi	r22, 0x03	; 3
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
 4cc:	8f e1       	ldi	r24, 0x1F	; 31
 4ce:	9e e4       	ldi	r25, 0x4E	; 78
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <LCD_sendCommand+0x7e>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <LCD_sendCommand+0x84>
 4d6:	00 00       	nop
	
	_delay_ms(5);
}
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <LCD_writeChar>:

void LCD_writeChar(uint8 ch)
{	
 4dc:	cf 93       	push	r28
 4de:	c8 2f       	mov	r28, r24
	DIO_setPinValue(LCD_CMD_PORT, RS_PIN, DIO_PIN_HIGH);
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	DIO_setPinValue(LCD_CMD_PORT, RW_PIN, DIO_PIN_LOW);
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	62 e0       	ldi	r22, 0x02	; 2
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_LOW);
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	63 e0       	ldi	r22, 0x03	; 3
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	
	/* send high 4 bits */
	LCD_WRITING_DATA_PORT = ((ch & 0xF0) | (LCD_WRITING_DATA_PORT & 0x0F));
 4fe:	8b b3       	in	r24, 0x1b	; 27
 500:	9c 2f       	mov	r25, r28
 502:	90 7f       	andi	r25, 0xF0	; 240
 504:	8f 70       	andi	r24, 0x0F	; 15
 506:	89 2b       	or	r24, r25
 508:	8b bb       	out	0x1b, r24	; 27
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_HIGH);
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	63 e0       	ldi	r22, 0x03	; 3
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
 514:	8f e9       	ldi	r24, 0x9F	; 159
 516:	9f e0       	ldi	r25, 0x0F	; 15
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <LCD_writeChar+0x3c>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <LCD_writeChar+0x42>
 51e:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_LOW);
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	63 e0       	ldi	r22, 0x03	; 3
 524:	40 e0       	ldi	r20, 0x00	; 0
 526:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
	
	/* send low 4 bits */
	LCD_WRITING_DATA_PORT = ((ch << 4) | (LCD_WRITING_DATA_PORT & 0x0F));
 52a:	8b b3       	in	r24, 0x1b	; 27
 52c:	c2 95       	swap	r28
 52e:	c0 7f       	andi	r28, 0xF0	; 240
 530:	8f 70       	andi	r24, 0x0F	; 15
 532:	c8 2b       	or	r28, r24
 534:	cb bb       	out	0x1b, r28	; 27
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_HIGH);
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	63 e0       	ldi	r22, 0x03	; 3
 53a:	41 e0       	ldi	r20, 0x01	; 1
 53c:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
 540:	8f e9       	ldi	r24, 0x9F	; 159
 542:	9f e0       	ldi	r25, 0x0F	; 15
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <LCD_writeChar+0x68>
 548:	00 c0       	rjmp	.+0      	; 0x54a <LCD_writeChar+0x6e>
 54a:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_CMD_PORT, E_PIN, DIO_PIN_LOW);
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	63 e0       	ldi	r22, 0x03	; 3
 550:	40 e0       	ldi	r20, 0x00	; 0
 552:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
 556:	8f e1       	ldi	r24, 0x1F	; 31
 558:	9e e4       	ldi	r25, 0x4E	; 78
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <LCD_writeChar+0x7e>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <LCD_writeChar+0x84>
 560:	00 00       	nop
	
	_delay_ms(5);
}
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <LCD_writeStr>:

void LCD_writeStr(uint8* str)
{
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	8c 01       	movw	r16, r24
	for(uint8 i=0; str[i]!=0; i++)
 56e:	fc 01       	movw	r30, r24
 570:	80 81       	ld	r24, Z
 572:	88 23       	and	r24, r24
 574:	51 f0       	breq	.+20     	; 0x58a <LCD_writeStr+0x24>
 576:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_writeChar(str[i]);
 578:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_writeChar>
	_delay_ms(5);
}

void LCD_writeStr(uint8* str)
{
	for(uint8 i=0; str[i]!=0; i++)
 57c:	cf 5f       	subi	r28, 0xFF	; 255
 57e:	f8 01       	movw	r30, r16
 580:	ec 0f       	add	r30, r28
 582:	f1 1d       	adc	r31, r1
 584:	80 81       	ld	r24, Z
 586:	88 23       	and	r24, r24
 588:	b9 f7       	brne	.-18     	; 0x578 <LCD_writeStr+0x12>
	{
		LCD_writeChar(str[i]);
	}
}
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	08 95       	ret

00000592 <LCD_clear>:

void LCD_clear()
{
	LCD_sendCommand(1);
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
}
 598:	08 95       	ret

0000059a <LCD_init>:

#elif  LCD_MODE == 4

void LCD_init()
{
	DIO_setPinDirection(LCD_CMD_PORT, RS_PIN, DIO_PIN_OUTPUT);
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	61 e0       	ldi	r22, 0x01	; 1
 59e:	41 e0       	ldi	r20, 0x01	; 1
 5a0:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
	DIO_setPinDirection(LCD_CMD_PORT, RW_PIN, DIO_PIN_OUTPUT);
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	62 e0       	ldi	r22, 0x02	; 2
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
	DIO_setPinDirection(LCD_CMD_PORT, E_PIN, DIO_PIN_OUTPUT);
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	63 e0       	ldi	r22, 0x03	; 3
 5b2:	41 e0       	ldi	r20, 0x01	; 1
 5b4:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
	
	DIO_setPinDirection(LCD_DATA_PORT, D4_PIN, DIO_PIN_OUTPUT);
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	64 e0       	ldi	r22, 0x04	; 4
 5bc:	41 e0       	ldi	r20, 0x01	; 1
 5be:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT, D5_PIN, DIO_PIN_OUTPUT);
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	65 e0       	ldi	r22, 0x05	; 5
 5c6:	41 e0       	ldi	r20, 0x01	; 1
 5c8:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT, D6_PIN, DIO_PIN_OUTPUT);
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	66 e0       	ldi	r22, 0x06	; 6
 5d0:	41 e0       	ldi	r20, 0x01	; 1
 5d2:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT, D7_PIN, DIO_PIN_OUTPUT);
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	67 e0       	ldi	r22, 0x07	; 7
 5da:	41 e0       	ldi	r20, 0x01	; 1
 5dc:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
 5e0:	8f ef       	ldi	r24, 0xFF	; 255
 5e2:	91 ee       	ldi	r25, 0xE1	; 225
 5e4:	a4 e0       	ldi	r26, 0x04	; 4
 5e6:	81 50       	subi	r24, 0x01	; 1
 5e8:	90 40       	sbci	r25, 0x00	; 0
 5ea:	a0 40       	sbci	r26, 0x00	; 0
 5ec:	e1 f7       	brne	.-8      	; 0x5e6 <LCD_init+0x4c>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <LCD_init+0x56>
 5f0:	00 00       	nop
	
	_delay_ms(100);
	LCD_sendCommand(0x33);
 5f2:	83 e3       	ldi	r24, 0x33	; 51
 5f4:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
	LCD_sendCommand(0x32);
 5f8:	82 e3       	ldi	r24, 0x32	; 50
 5fa:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
	LCD_sendCommand(0x28);
 5fe:	88 e2       	ldi	r24, 0x28	; 40
 600:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
	
	LCD_clear();
 604:	0e 94 c9 02 	call	0x592	; 0x592 <LCD_clear>
	LCD_sendCommand(RETURN_HOME);
 608:	82 e0       	ldi	r24, 0x02	; 2
 60a:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_OFF);
 60e:	8c e0       	ldi	r24, 0x0C	; 12
 610:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_LEFT_TO_RIGHT);
 614:	86 e0       	ldi	r24, 0x06	; 6
 616:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
}
 61a:	08 95       	ret

0000061c <LCD_goTo>:
{
	LCD_sendCommand(1);
}

void LCD_goTo(uint8 row, uint8 col)
{
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	00 d0       	rcall	.+0      	; 0x622 <LCD_goTo+0x6>
 622:	cd b7       	in	r28, 0x3d	; 61
 624:	de b7       	in	r29, 0x3e	; 62
uint8 arr[2] = {0x80, 0xC0};
 626:	90 e8       	ldi	r25, 0x80	; 128
 628:	99 83       	std	Y+1, r25	; 0x01
 62a:	90 ec       	ldi	r25, 0xC0	; 192
 62c:	9a 83       	std	Y+2, r25	; 0x02
LCD_sendCommand(arr[row]+col);
 62e:	fe 01       	movw	r30, r28
 630:	e8 0f       	add	r30, r24
 632:	f1 1d       	adc	r31, r1
 634:	81 81       	ldd	r24, Z+1	; 0x01
 636:	86 0f       	add	r24, r22
 638:	0e 94 29 02 	call	0x452	; 0x452 <LCD_sendCommand>
}
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <LCD_writeInt>:

void LCD_writeInt(sint32 num)
{
 646:	4f 92       	push	r4
 648:	5f 92       	push	r5
 64a:	6f 92       	push	r6
 64c:	7f 92       	push	r7
 64e:	8f 92       	push	r8
 650:	9f 92       	push	r9
 652:	af 92       	push	r10
 654:	bf 92       	push	r11
 656:	cf 92       	push	r12
 658:	df 92       	push	r13
 65a:	ef 92       	push	r14
 65c:	ff 92       	push	r15
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
 66a:	2b 97       	sbiw	r28, 0x0b	; 11
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	f8 94       	cli
 670:	de bf       	out	0x3e, r29	; 62
 672:	0f be       	out	0x3f, r0	; 63
 674:	cd bf       	out	0x3d, r28	; 61
 676:	6b 01       	movw	r12, r22
 678:	7c 01       	movw	r14, r24
	if(num == 0)
 67a:	61 15       	cp	r22, r1
 67c:	71 05       	cpc	r23, r1
 67e:	81 05       	cpc	r24, r1
 680:	91 05       	cpc	r25, r1
 682:	21 f4       	brne	.+8      	; 0x68c <LCD_writeInt+0x46>
	{
		LCD_writeChar('0');
 684:	80 e3       	ldi	r24, 0x30	; 48
 686:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_writeChar>
		return;
 68a:	67 c0       	rjmp	.+206    	; 0x75a <LCD_writeInt+0x114>
	}
	
	if(num < 0)
 68c:	99 23       	and	r25, r25
 68e:	8c f0       	brlt	.+34     	; 0x6b2 <LCD_writeInt+0x6c>
 690:	8b 01       	movw	r16, r22
 692:	9c 01       	movw	r18, r24
 694:	02 c0       	rjmp	.+4      	; 0x69a <LCD_writeInt+0x54>
	{
		LCD_writeChar('-');
		num *= -1;
 696:	97 01       	movw	r18, r14
 698:	86 01       	movw	r16, r12
 69a:	bb 24       	eor	r11, r11
	sint32 cpyOfNum = num;
	uint8 len = 0;
	while(cpyOfNum != 0)
	{
		len++;
		cpyOfNum /= 10; 
 69c:	0f 2e       	mov	r0, r31
 69e:	fa e0       	ldi	r31, 0x0A	; 10
 6a0:	4f 2e       	mov	r4, r31
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	5f 2e       	mov	r5, r31
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	6f 2e       	mov	r6, r31
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	7f 2e       	mov	r7, r31
 6ae:	f0 2d       	mov	r31, r0
 6b0:	13 c0       	rjmp	.+38     	; 0x6d8 <LCD_writeInt+0x92>
		return;
	}
	
	if(num < 0)
	{
		LCD_writeChar('-');
 6b2:	8d e2       	ldi	r24, 0x2D	; 45
 6b4:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_writeChar>
		num *= -1;
 6b8:	f0 94       	com	r15
 6ba:	e0 94       	com	r14
 6bc:	d0 94       	com	r13
 6be:	c0 94       	com	r12
 6c0:	c1 1c       	adc	r12, r1
 6c2:	d1 1c       	adc	r13, r1
 6c4:	e1 1c       	adc	r14, r1
 6c6:	f1 1c       	adc	r15, r1
	}
	
	uint8 str[11];
	sint32 cpyOfNum = num;
	uint8 len = 0;
	while(cpyOfNum != 0)
 6c8:	c1 14       	cp	r12, r1
 6ca:	d1 04       	cpc	r13, r1
 6cc:	e1 04       	cpc	r14, r1
 6ce:	f1 04       	cpc	r15, r1
 6d0:	11 f7       	brne	.-60     	; 0x696 <LCD_writeInt+0x50>
	{
		len++;
		cpyOfNum /= 10; 
	}
	
	for(int i=len-1; i>=0; i--)
 6d2:	66 24       	eor	r6, r6
 6d4:	77 24       	eor	r7, r7
 6d6:	36 c0       	rjmp	.+108    	; 0x744 <LCD_writeInt+0xfe>
	uint8 str[11];
	sint32 cpyOfNum = num;
	uint8 len = 0;
	while(cpyOfNum != 0)
	{
		len++;
 6d8:	b3 94       	inc	r11
		cpyOfNum /= 10; 
 6da:	c9 01       	movw	r24, r18
 6dc:	b8 01       	movw	r22, r16
 6de:	a3 01       	movw	r20, r6
 6e0:	92 01       	movw	r18, r4
 6e2:	0e 94 3f 04 	call	0x87e	; 0x87e <__divmodsi4>
 6e6:	89 01       	movw	r16, r18
 6e8:	9a 01       	movw	r18, r20
	}
	
	uint8 str[11];
	sint32 cpyOfNum = num;
	uint8 len = 0;
	while(cpyOfNum != 0)
 6ea:	01 15       	cp	r16, r1
 6ec:	11 05       	cpc	r17, r1
 6ee:	21 05       	cpc	r18, r1
 6f0:	31 05       	cpc	r19, r1
 6f2:	91 f7       	brne	.-28     	; 0x6d8 <LCD_writeInt+0x92>
	{
		len++;
		cpyOfNum /= 10; 
	}
	
	for(int i=len-1; i>=0; i--)
 6f4:	6b 2c       	mov	r6, r11
 6f6:	77 24       	eor	r7, r7
 6f8:	c3 01       	movw	r24, r6
 6fa:	01 97       	sbiw	r24, 0x01	; 1
 6fc:	1a f1       	brmi	.+70     	; 0x744 <LCD_writeInt+0xfe>
{
uint8 arr[2] = {0x80, 0xC0};
LCD_sendCommand(arr[row]+col);
}

void LCD_writeInt(sint32 num)
 6fe:	83 01       	movw	r16, r6
 700:	2e 01       	movw	r4, r28
 702:	08 94       	sec
 704:	41 1c       	adc	r4, r1
 706:	51 1c       	adc	r5, r1
 708:	04 0d       	add	r16, r4
 70a:	15 1d       	adc	r17, r5
		cpyOfNum /= 10; 
	}
	
	for(int i=len-1; i>=0; i--)
	{
		str[i] = num%10 + '0';
 70c:	0f 2e       	mov	r0, r31
 70e:	fa e0       	ldi	r31, 0x0A	; 10
 710:	8f 2e       	mov	r8, r31
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	9f 2e       	mov	r9, r31
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	af 2e       	mov	r10, r31
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	bf 2e       	mov	r11, r31
 71e:	f0 2d       	mov	r31, r0
{
uint8 arr[2] = {0x80, 0xC0};
LCD_sendCommand(arr[row]+col);
}

void LCD_writeInt(sint32 num)
 720:	01 50       	subi	r16, 0x01	; 1
 722:	10 40       	sbci	r17, 0x00	; 0
		cpyOfNum /= 10; 
	}
	
	for(int i=len-1; i>=0; i--)
	{
		str[i] = num%10 + '0';
 724:	c7 01       	movw	r24, r14
 726:	b6 01       	movw	r22, r12
 728:	a5 01       	movw	r20, r10
 72a:	94 01       	movw	r18, r8
 72c:	0e 94 3f 04 	call	0x87e	; 0x87e <__divmodsi4>
 730:	60 5d       	subi	r22, 0xD0	; 208
 732:	f8 01       	movw	r30, r16
 734:	60 83       	st	Z, r22
		num /= 10;
 736:	c2 2e       	mov	r12, r18
 738:	d3 2e       	mov	r13, r19
 73a:	e4 2e       	mov	r14, r20
 73c:	f5 2e       	mov	r15, r21
	{
		len++;
		cpyOfNum /= 10; 
	}
	
	for(int i=len-1; i>=0; i--)
 73e:	04 15       	cp	r16, r4
 740:	15 05       	cpc	r17, r5
 742:	71 f7       	brne	.-36     	; 0x720 <LCD_writeInt+0xda>
	{
		str[i] = num%10 + '0';
		num /= 10;
	}
	str[len] = 0;
 744:	e1 e0       	ldi	r30, 0x01	; 1
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	ec 0f       	add	r30, r28
 74a:	fd 1f       	adc	r31, r29
 74c:	e6 0d       	add	r30, r6
 74e:	f7 1d       	adc	r31, r7
 750:	10 82       	st	Z, r1
	
	LCD_writeStr(str);
 752:	ce 01       	movw	r24, r28
 754:	01 96       	adiw	r24, 0x01	; 1
 756:	0e 94 b3 02 	call	0x566	; 0x566 <LCD_writeStr>
}
 75a:	2b 96       	adiw	r28, 0x0b	; 11
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	f8 94       	cli
 760:	de bf       	out	0x3e, r29	; 62
 762:	0f be       	out	0x3f, r0	; 63
 764:	cd bf       	out	0x3d, r28	; 61
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	1f 91       	pop	r17
 76c:	0f 91       	pop	r16
 76e:	ff 90       	pop	r15
 770:	ef 90       	pop	r14
 772:	df 90       	pop	r13
 774:	cf 90       	pop	r12
 776:	bf 90       	pop	r11
 778:	af 90       	pop	r10
 77a:	9f 90       	pop	r9
 77c:	8f 90       	pop	r8
 77e:	7f 90       	pop	r7
 780:	6f 90       	pop	r6
 782:	5f 90       	pop	r5
 784:	4f 90       	pop	r4
 786:	08 95       	ret

00000788 <main>:
#define F_CPU	8000000UL
#include <util/delay.h>

int main(void)
{
	LCD_init();
 788:	0e 94 cd 02 	call	0x59a	; 0x59a <LCD_init>
	UART_init();
 78c:	0e 94 0c 04 	call	0x818	; 0x818 <UART_init>
	SPI_init();
 790:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_init>
	SPI_masterStartTransmission();
 794:	0e 94 00 04 	call	0x800	; 0x800 <SPI_masterStartTransmission>
 798:	8f ef       	ldi	r24, 0xFF	; 255
 79a:	93 ed       	ldi	r25, 0xD3	; 211
 79c:	a0 e3       	ldi	r26, 0x30	; 48
 79e:	81 50       	subi	r24, 0x01	; 1
 7a0:	90 40       	sbci	r25, 0x00	; 0
 7a2:	a0 40       	sbci	r26, 0x00	; 0
 7a4:	e1 f7       	brne	.-8      	; 0x79e <main+0x16>
 7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <main+0x20>
 7a8:	00 00       	nop
	_delay_ms(1000);
	uint8 data;
	
    while(1)
    {
		data = UART_Rx();
 7aa:	0e 94 20 04 	call	0x840	; 0x840 <UART_Rx>
 7ae:	c8 2f       	mov	r28, r24
		LCD_writeChar(data);
 7b0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <LCD_writeChar>
		SPI_Transiver(data);
 7b4:	8c 2f       	mov	r24, r28
 7b6:	0e 94 f7 03 	call	0x7ee	; 0x7ee <SPI_Transiver>
 7ba:	f7 cf       	rjmp	.-18     	; 0x7aa <main+0x22>

000007bc <SPI_init>:
		SET_BIT(SPCR_value, 7);
	#endif
	
	
	#if  SPI_STATE == SPI_ENABLE && SPI_DEVISE_MODE == SPI_MSTR
		DIO_setPinDirection(SPI_PORT, SPI_SS_PIN, DIO_PIN_OUTPUT);
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	64 e0       	ldi	r22, 0x04	; 4
 7c0:	41 e0       	ldi	r20, 0x01	; 1
 7c2:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
		DIO_setPinDirection(SPI_PORT, SPI_MOSI_PIN, DIO_PIN_OUTPUT);
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	65 e0       	ldi	r22, 0x05	; 5
 7ca:	41 e0       	ldi	r20, 0x01	; 1
 7cc:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
		DIO_setPinDirection(SPI_PORT, SPI_MISO_PIN, DIO_PIN_INPUT);
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	66 e0       	ldi	r22, 0x06	; 6
 7d4:	40 e0       	ldi	r20, 0x00	; 0
 7d6:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
		DIO_setPinDirection(SPI_PORT, SPI_CLK_PIN, DIO_PIN_OUTPUT);
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	67 e0       	ldi	r22, 0x07	; 7
 7de:	41 e0       	ldi	r20, 0x01	; 1
 7e0:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
		SET_BIT(SPCR_value, 1);
		SPI->SPSR = 0xC1;
	#elif SPI_DEVISE_MODE == SPI_MSTR && SPI_CLK_PRESCALER == SPI_CLK_PRESCALER_128
		SET_BIT(SPCR_value, 0);
		SET_BIT(SPCR_value, 1);
		SPI->SPSR = 0xC0;
 7e4:	80 ec       	ldi	r24, 0xC0	; 192
 7e6:	8e b9       	out	0x0e, r24	; 14
	
	#if   SPI_CLK_PHASE_MODE == SPI_CLK_PHASE_HIGH
		SET_BIT(SPCR_value, 2);
	#endif
	
	SPI->SPCR = SPCR_value;
 7e8:	83 e7       	ldi	r24, 0x73	; 115
 7ea:	8d b9       	out	0x0d, r24	; 13
}
 7ec:	08 95       	ret

000007ee <SPI_Transiver>:

uint8 SPI_Transiver(uint8 data)
{
	SPI->SPDR = data;
 7ee:	8f b9       	out	0x0f, r24	; 15
	while(GET_BIT(SPI->SPSR, 7) == 0);
 7f0:	77 9b       	sbis	0x0e, 7	; 14
 7f2:	fe cf       	rjmp	.-4      	; 0x7f0 <SPI_Transiver+0x2>
	return SPI->SPDR;
 7f4:	8f b1       	in	r24, 0x0f	; 15
}
 7f6:	08 95       	ret

000007f8 <SPI_RxOnly>:

uint8 SPI_RxOnly()
{
	while(GET_BIT(SPI->SPSR, 7) == 0);
 7f8:	77 9b       	sbis	0x0e, 7	; 14
 7fa:	fe cf       	rjmp	.-4      	; 0x7f8 <SPI_RxOnly>
	return SPI->SPDR;
 7fc:	8f b1       	in	r24, 0x0f	; 15
}
 7fe:	08 95       	ret

00000800 <SPI_masterStartTransmission>:

#if  SPI_DEVISE_MODE == SPI_MSTR
void SPI_masterStartTransmission()
{
	DIO_setPinValue(SPI_PORT, SPI_SS_PIN, DIO_PIN_LOW);
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	64 e0       	ldi	r22, 0x04	; 4
 804:	40 e0       	ldi	r20, 0x00	; 0
 806:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
}
 80a:	08 95       	ret

0000080c <SPI_masterEndTransmission>:

void SPI_masterEndTransmission()
{
	DIO_setPinValue(SPI_PORT, SPI_SS_PIN, DIO_PIN_HIGH);
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	64 e0       	ldi	r22, 0x04	; 4
 810:	41 e0       	ldi	r20, 0x01	; 1
 812:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_setPinValue>
}
 816:	08 95       	ret

00000818 <UART_init>:
#include "UART.h"

void UART_init()
{
	uint32 buadRate = F_OSC / (16*BUAD_RATE) - 1;
	UBRRL = buadRate;
 818:	83 e3       	ldi	r24, 0x33	; 51
 81a:	89 b9       	out	0x09, r24	; 9
	UBRRH = buadRate>>8;
 81c:	10 bc       	out	0x20, r1	; 32
	
	
	#if  RX_STATE == RX_ENABLE
		DIO_setPinDirection(UART_PORT, UART_RX_PIN, DIO_PIN_INPUT);
 81e:	83 e0       	ldi	r24, 0x03	; 3
 820:	60 e0       	ldi	r22, 0x00	; 0
 822:	40 e0       	ldi	r20, 0x00	; 0
 824:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
		SET_BIT(UCSRB, 4);
 828:	54 9a       	sbi	0x0a, 4	; 10
	#elif RX_STATE == RX_DISABLE
		CLR_BIT(UCSRB, 4);
	#endif
	
	#if  TX_STATE == TX_ENABLE
		DIO_setPinDirection(UART_PORT, UART_TX_PIN, DIO_PIN_OUTPUT);
 82a:	83 e0       	ldi	r24, 0x03	; 3
 82c:	61 e0       	ldi	r22, 0x01	; 1
 82e:	41 e0       	ldi	r20, 0x01	; 1
 830:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_setPinDirection>
		SET_BIT(UCSRB, 3);
 834:	53 9a       	sbi	0x0a, 3	; 10
	
	
	#if  RX_INTERRUPT_STATE == RX_INTERRUPT_ENABLE
		SET_BIT(UCSRB, 7);
	#elif RX_INTERRUPT_STATE == RX_INTERRUPT_DISABLE
		CLR_BIT(UCSRB, 7);
 836:	57 98       	cbi	0x0a, 7	; 10
	#endif
	
	#if  TX_INTERRUPT_STATE == TX_INTERRUPT_ENABLE
		SET_BIT(UCSRB, 6);
	#elif TX_INTERRUPT_STATE == TX_INTERRUPT_DISABLE
		CLR_BIT(UCSRB, 6);
 838:	56 98       	cbi	0x0a, 6	; 10
		SET_BIT(UCSRB, 2);
		SET_BIT(UCSRC_value, 2);
		SET_BIT(UCSRC_value, 1);
	#endif
	
	UCSRC = UCSRC_value;
 83a:	86 e8       	ldi	r24, 0x86	; 134
 83c:	80 bd       	out	0x20, r24	; 32
	
}
 83e:	08 95       	ret

00000840 <UART_Rx>:

uint8 UART_Rx()
{
	while(GET_BIT(UCSRA, 7) == 0);
 840:	5f 9b       	sbis	0x0b, 7	; 11
 842:	fe cf       	rjmp	.-4      	; 0x840 <UART_Rx>
	return UDR;
 844:	8c b1       	in	r24, 0x0c	; 12
}
 846:	08 95       	ret

00000848 <UART_Tx>:

void UART_Tx(uint8 data)
{
	UDR = data;
 848:	8c b9       	out	0x0c, r24	; 12
	while(GET_BIT(UCSRA, 5) == 0);
 84a:	8b b1       	in	r24, 0x0b	; 11
 84c:	85 ff       	sbrs	r24, 5
 84e:	fd cf       	rjmp	.-6      	; 0x84a <UART_Tx+0x2>
}
 850:	08 95       	ret

00000852 <UART_TxString>:

void UART_TxString(uint8* str)
{
 852:	0f 93       	push	r16
 854:	1f 93       	push	r17
 856:	cf 93       	push	r28
 858:	8c 01       	movw	r16, r24
	uint8 i=0;
	while(str[i] != 0) 
 85a:	fc 01       	movw	r30, r24
 85c:	80 81       	ld	r24, Z
 85e:	88 23       	and	r24, r24
 860:	51 f0       	breq	.+20     	; 0x876 <__stack+0x17>
	while(GET_BIT(UCSRA, 5) == 0);
}

void UART_TxString(uint8* str)
{
	uint8 i=0;
 862:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != 0) 
	{
		UART_Tx(str[i]);
 864:	0e 94 24 04 	call	0x848	; 0x848 <UART_Tx>
		i++;
 868:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_TxString(uint8* str)
{
	uint8 i=0;
	while(str[i] != 0) 
 86a:	f8 01       	movw	r30, r16
 86c:	ec 0f       	add	r30, r28
 86e:	f1 1d       	adc	r31, r1
 870:	80 81       	ld	r24, Z
 872:	88 23       	and	r24, r24
 874:	b9 f7       	brne	.-18     	; 0x864 <__stack+0x5>
	{
		UART_Tx(str[i]);
		i++;
	}
}
 876:	cf 91       	pop	r28
 878:	1f 91       	pop	r17
 87a:	0f 91       	pop	r16
 87c:	08 95       	ret

0000087e <__divmodsi4>:
 87e:	97 fb       	bst	r25, 7
 880:	09 2e       	mov	r0, r25
 882:	05 26       	eor	r0, r21
 884:	0e d0       	rcall	.+28     	; 0x8a2 <__divmodsi4_neg1>
 886:	57 fd       	sbrc	r21, 7
 888:	04 d0       	rcall	.+8      	; 0x892 <__divmodsi4_neg2>
 88a:	14 d0       	rcall	.+40     	; 0x8b4 <__udivmodsi4>
 88c:	0a d0       	rcall	.+20     	; 0x8a2 <__divmodsi4_neg1>
 88e:	00 1c       	adc	r0, r0
 890:	38 f4       	brcc	.+14     	; 0x8a0 <__divmodsi4_exit>

00000892 <__divmodsi4_neg2>:
 892:	50 95       	com	r21
 894:	40 95       	com	r20
 896:	30 95       	com	r19
 898:	21 95       	neg	r18
 89a:	3f 4f       	sbci	r19, 0xFF	; 255
 89c:	4f 4f       	sbci	r20, 0xFF	; 255
 89e:	5f 4f       	sbci	r21, 0xFF	; 255

000008a0 <__divmodsi4_exit>:
 8a0:	08 95       	ret

000008a2 <__divmodsi4_neg1>:
 8a2:	f6 f7       	brtc	.-4      	; 0x8a0 <__divmodsi4_exit>
 8a4:	90 95       	com	r25
 8a6:	80 95       	com	r24
 8a8:	70 95       	com	r23
 8aa:	61 95       	neg	r22
 8ac:	7f 4f       	sbci	r23, 0xFF	; 255
 8ae:	8f 4f       	sbci	r24, 0xFF	; 255
 8b0:	9f 4f       	sbci	r25, 0xFF	; 255
 8b2:	08 95       	ret

000008b4 <__udivmodsi4>:
 8b4:	a1 e2       	ldi	r26, 0x21	; 33
 8b6:	1a 2e       	mov	r1, r26
 8b8:	aa 1b       	sub	r26, r26
 8ba:	bb 1b       	sub	r27, r27
 8bc:	fd 01       	movw	r30, r26
 8be:	0d c0       	rjmp	.+26     	; 0x8da <__udivmodsi4_ep>

000008c0 <__udivmodsi4_loop>:
 8c0:	aa 1f       	adc	r26, r26
 8c2:	bb 1f       	adc	r27, r27
 8c4:	ee 1f       	adc	r30, r30
 8c6:	ff 1f       	adc	r31, r31
 8c8:	a2 17       	cp	r26, r18
 8ca:	b3 07       	cpc	r27, r19
 8cc:	e4 07       	cpc	r30, r20
 8ce:	f5 07       	cpc	r31, r21
 8d0:	20 f0       	brcs	.+8      	; 0x8da <__udivmodsi4_ep>
 8d2:	a2 1b       	sub	r26, r18
 8d4:	b3 0b       	sbc	r27, r19
 8d6:	e4 0b       	sbc	r30, r20
 8d8:	f5 0b       	sbc	r31, r21

000008da <__udivmodsi4_ep>:
 8da:	66 1f       	adc	r22, r22
 8dc:	77 1f       	adc	r23, r23
 8de:	88 1f       	adc	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	1a 94       	dec	r1
 8e4:	69 f7       	brne	.-38     	; 0x8c0 <__udivmodsi4_loop>
 8e6:	60 95       	com	r22
 8e8:	70 95       	com	r23
 8ea:	80 95       	com	r24
 8ec:	90 95       	com	r25
 8ee:	9b 01       	movw	r18, r22
 8f0:	ac 01       	movw	r20, r24
 8f2:	bd 01       	movw	r22, r26
 8f4:	cf 01       	movw	r24, r30
 8f6:	08 95       	ret

000008f8 <_exit>:
 8f8:	f8 94       	cli

000008fa <__stop_program>:
 8fa:	ff cf       	rjmp	.-2      	; 0x8fa <__stop_program>
